import React, { useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import CommonPageTemplate from '../common/CommonPageTemplate';
import SimpleHeader from '../layout/SimpleHeader';
import SocialSignupModal from './SocialSignupModal';
import { authAPI } from '../../utils/ajax';
import { testLogin } from '../../utils/ajax';
import { kakaoLogin, naverLogin, handleOAuthCallback as socialHandleOAuthCallback } from '../../utils/socialLogin';
// import { setLoginSession, redirectToDashboard, logSessionInfo } from '../../utils/session'; // Ï†úÍ±∞Îê®
import { sessionManager } from '../../utils/sessionManager';
import { useSession } from '../../contexts/SessionContext';
import { LOGIN_SESSION_CHECK_DELAY, EXISTING_SESSION_CHECK_DELAY } from '../../constants/session';
import { getDashboardPath, redirectToDashboardWithFallback } from '../../utils/session';
import notificationManager from '../../utils/notification';
import { TABLET_LOGIN_CSS } from '../../constants/css';
import { TABLET_LOGIN_CONSTANTS } from '../../constants/css-variables';
import '../../styles/auth/TabletLogin.css';

const TabletLogin = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const { login, testLogin: centralTestLogin, checkSession, setDuplicateLoginModal } = useSession();
  const [formData, setFormData] = useState({
    email: '',
    password: ''
  });
  const [showPassword, setShowPassword] = useState(false);
  const [oauth2Config, setOauth2Config] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [showSocialSignupModal, setShowSocialSignupModal] = useState(false);
  const [socialUserInfo, setSocialUserInfo] = useState(null);
  const [isHamburgerMenuOpen, setIsHamburgerMenuOpen] = useState(false);
  
  // SMS Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú
  const [smsMode, setSmsMode] = useState(false);
  const [phoneNumber, setPhoneNumber] = useState('');
  const [verificationCode, setVerificationCode] = useState('');
  const [isCodeSent, setIsCodeSent] = useState(false);
  const [countdown, setCountdown] = useState(0);

  // Í∞ÑÎã®Ìïú Ìà¥ÌåÅ ÏÉÅÌÉú (CSS Ï∂©Îèå Î∞©ÏßÄÏö©)
  const [tooltip, setTooltip] = useState({
    show: false,
    message: '',
    type: 'error'
  });

  // Ï†ÑÎ¨∏Ï†ÅÏù∏ ÏïåÎ¶º ÌëúÏãú Ìï®Ïàò
  const showTooltip = (message, type = 'error') => {
    console.log('üîî Î°úÍ∑∏Ïù∏ ÏïåÎ¶º ÌëúÏãú:', { message, type });
    
    // Ï¶âÏãú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
    setTooltip({ show: true, message, type });
    
    // ÎîîÎ≤ÑÍπÖÏùÑ ÏúÑÌïú Ï∂îÍ∞Ä Î°úÍ∑∏
    console.log('üîî Ìà¥ÌåÅ ÏÉÅÌÉú ÏÑ§Ï†ï ÏôÑÎ£å:', { show: true, message, type });
    
    // 6Ï¥à ÌõÑ ÏûêÎèô Ïà®ÍπÄ (Îçî Í∏∏Í≤å)
    setTimeout(() => {
      console.log('üîî Ìà¥ÌåÅ ÏûêÎèô Ïà®ÍπÄ');
      setTooltip({ show: false, message: '', type: 'error' });
    }, 6000);
  };

  // Ìà¥ÌåÅ ÏÉÅÌÉú ÎîîÎ≤ÑÍπÖ
  useEffect(() => {
    console.log('üîî Ìà¥ÌåÅ ÏÉÅÌÉú Î≥ÄÍ≤Ω:', tooltip);
  }, [tooltip]);

  useEffect(() => {
    getOAuth2Config();
    checkOAuthCallback();
  }, [location]); // location Î≥ÄÍ≤Ω Ïãú OAuth ÏΩúÎ∞± Ï≤¥ÌÅ¨
  
  // Ïπ¥Ïö¥Ìä∏Îã§Ïö¥ ÌÉÄÏù¥Î®∏ (Î≥ÑÎèÑ useEffect)
  useEffect(() => {
    let timer;
    if (countdown > 0) {
      timer = setInterval(() => {
        setCountdown(prev => prev - 1);
      }, 1000);
    }
    
    return () => {
      if (timer) clearInterval(timer);
    };
  }, [countdown]);

  // ÏÑ∏ÏÖòÏù¥ ÏûàÏúºÎ©¥ ÎåÄÏãúÎ≥¥ÎìúÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏ (Î°úÍ∑∏Ïù∏ ÏãúÎèÑ Ï§ëÏù¥Í±∞ÎÇò ÏïåÎ¶º ÌëúÏãú Ï§ëÏóêÎäî Ï†úÏô∏)
  useEffect(() => {
    // Î°úÍ∑∏Ïù∏ ÏãúÎèÑ Ï§ëÏù¥Í±∞ÎÇò ÏïåÎ¶º ÌëúÏãú Ï§ëÏóêÎäî ÏÑ∏ÏÖò ÌôïÏù∏ Ïïà Ìï®
    if (isLoading || tooltip.show) {
      console.log('üö´ ÏÑ∏ÏÖò ÌôïÏù∏ Ïä§ÌÇµ: Î°úÎî© Ï§ëÏù¥Í±∞ÎÇò ÏïåÎ¶º ÌëúÏãú Ï§ë');
      return;
    }

    const checkExistingSession = async () => {
      try {
        console.log('üîç Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄ - Í∏∞Ï°¥ ÏÑ∏ÏÖò ÌôïÏù∏ Ï§ë...');
        const isLoggedIn = await checkSession();
        
        if (isLoggedIn) {
          const user = sessionManager.getUser();
          if (user && user.role) {
            const dashboardPath = getDashboardPath(user.role);
            console.log('‚úÖ Í∏∞Ï°¥ ÏÑ∏ÏÖò Î∞úÍ≤¨, ÎåÄÏãúÎ≥¥ÎìúÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏:', dashboardPath);
            console.log('üë§ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥:', user);
            navigate(dashboardPath, { replace: true });
          }
        }
      } catch (error) {
        console.error('‚ùå ÏÑ∏ÏÖò ÌôïÏù∏ Ïã§Ìå®:', error);
      }
    };

    // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ ÏôÑÎ£å ÌõÑ ÏÑ∏ÏÖò ÌôïÏù∏
    if (EXISTING_SESSION_CHECK_DELAY > 0) {
      const timer = setTimeout(checkExistingSession, EXISTING_SESSION_CHECK_DELAY);
      return () => clearTimeout(timer);
    } else {
      // Ï¶âÏãú Ïã§Ìñâ
      checkExistingSession();
    }
  }, [checkSession, navigate, isLoading, tooltip.show]);

  const getOAuth2Config = async () => {
    try {
      const config = await authAPI.getOAuth2Config();
      setOauth2Config(config);
    } catch (error) {
      console.error('OAuth2 ÏÑ§Ï†ï Î°úÎìú Ïã§Ìå®:', error);
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const togglePassword = () => {
    setShowPassword(!showPassword);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!formData.email || !formData.password) {
      showTooltip('Ïù¥Î©îÏùºÍ≥º ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.', 'warning');
      return;
    }

    setIsLoading(true);
    try {
      console.log('üîê Î°úÍ∑∏Ïù∏ ÏöîÏ≤≠ Îç∞Ïù¥ÌÑ∞:', formData);
      
      // ÏßÅÏ†ë API Ìò∏Ï∂ú (SessionContext Î°úÎî© ÏÉÅÌÉú ÏòÅÌñ• Î∞©ÏßÄ)
      const result = await authAPI.login(formData);
      
      if (result.success) {
        console.log('‚úÖ Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ:', result.user);
        
        // sessionManagerÏóê ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏÑ§Ï†ï (SessionContext Î°úÎî© ÏÉÅÌÉú ÏòÅÌñ• ÏóÜÏù¥)
        sessionManager.setUser(result.user, {
          accessToken: result.accessToken,
          refreshToken: result.refreshToken
        });
        
        // Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ ÏïåÎ¶º
        showTooltip('Î°úÍ∑∏Ïù∏Ïóê ÏÑ±Í≥µÌñàÏäµÎãàÎã§.', 'success');
        
        // ÏÑ∏ÏÖò ÏÑ§Ï†ï ÏôÑÎ£å ÌõÑ Ïû†Ïãú ÎåÄÍ∏∞ (ÏãúÍ∞Ñ Îã®Ï∂ï)
        console.log('‚è≥ ÏÑ∏ÏÖò ÏÑ§Ï†ï ÏôÑÎ£å, Ïû†Ïãú ÎåÄÍ∏∞...');
        await new Promise(resolve => setTimeout(resolve, 500));
        
        // Í≥µÌÜµ Î¶¨Îã§Ïù¥Î†âÏÖò Ìï®Ïàò ÏÇ¨Ïö©
        console.log('‚úÖ Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ, ÎåÄÏãúÎ≥¥ÎìúÎ°ú Ïù¥Îèô:', result.user.role);
        redirectToDashboardWithFallback(result.user.role, navigate);
      } else if (result.requiresConfirmation) {
        // Ï§ëÎ≥µ Î°úÍ∑∏Ïù∏ ÌôïÏù∏ ÏöîÏ≤≠
        console.log('üîî Ï§ëÎ≥µ Î°úÍ∑∏Ïù∏ ÌôïÏù∏ ÏöîÏ≤≠:', result.message);
        setIsLoading(false);
        
        // Ï§ëÎ≥µ Î°úÍ∑∏Ïù∏ Î™®Îã¨ ÌëúÏãú
        const modalData = {
          isOpen: true,
          message: result.message || 'Îã§Î•∏ Í≥≥ÏóêÏÑú Î°úÍ∑∏Ïù∏ÎêòÏñ¥ ÏûàÏäµÎãàÎã§. Í∏∞Ï°¥ ÏÑ∏ÏÖòÏùÑ Ï¢ÖÎ£åÌïòÍ≥† ÏÉàÎ°ú Î°úÍ∑∏Ïù∏ÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
          loginData: formData
        };
        
        console.log('üîî Ï§ëÎ≥µ Î°úÍ∑∏Ïù∏ Î™®Îã¨ Îç∞Ïù¥ÌÑ∞:', modalData);
        setDuplicateLoginModal(modalData);
        console.log('üîî Ï§ëÎ≥µ Î°úÍ∑∏Ïù∏ Î™®Îã¨ ÏÑ§Ï†ï ÏôÑÎ£å');
      } else {
        console.log('‚ùå Î°úÍ∑∏Ïù∏ Ïã§Ìå®:', result.message);
        // Î°úÎî© Ìï¥Ï†ú ÌõÑ ÏïåÎ¶º ÌëúÏãú
        setIsLoading(false);
        // Î©îÎ™®Î¶¨Ïóê Îî∞Îùº Î°úÍ∑∏Ïù∏ Ïã§Ìå® Ïãú Í≥µÌÜµ Î©îÏãúÏßÄ ÏÇ¨Ïö©
        setTimeout(() => {
          showTooltip('ÏïÑÏù¥Îîî ÎòêÎäî ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÌãÄÎ¶¨Îãà Îã§Ïãú ÌôïÏù∏ÌïòÏãúÍ≥† ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî', 'error');
        }, 100); // Î°úÎî© Ìï¥Ï†ú ÌõÑ ÏïåÎ¶º ÌëúÏãú
        return; // finally Î∏îÎ°ù Ïã§Ìñâ Î∞©ÏßÄ
      }
    } catch (error) {
      console.error('‚ùå Î°úÍ∑∏Ïù∏ Ïò§Î•ò:', error);
      console.error('‚ùå Ïò§Î•ò ÏÉÅÏÑ∏:', error.message);
      // Î°úÎî© Ìï¥Ï†ú ÌõÑ ÏïåÎ¶º ÌëúÏãú
      setIsLoading(false);
      // Í≥µÌÜµ ÏïåÎ¶º ÏãúÏä§ÌÖú ÏÇ¨Ïö© - Î°úÍ∑∏Ïù∏ Ïã§Ìå® Ïãú Í≥µÌÜµ Î©îÏãúÏßÄ
      setTimeout(() => {
        showTooltip('ÏïÑÏù¥Îîî ÎòêÎäî ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÌãÄÎ¶¨Îãà Îã§Ïãú ÌïúÎ≤à ÌôïÏù∏ Î∂ÄÌÉÅÌï¥Ïöî', 'error');
      }, 100); // Î°úÎî© Ìï¥Ï†ú ÌõÑ ÏïåÎ¶º ÌëúÏãú
      return; // finally Î∏îÎ°ù Ïã§Ìñâ Î∞©ÏßÄ
    } finally {
      // ÏÑ±Í≥µÌïú Í≤ΩÏö∞ÏóêÎßå Î°úÎî© Ìï¥Ï†ú (Ïã§Ìå®Îäî ÏúÑÏóêÏÑú Ïù¥ÎØ∏ Ï≤òÎ¶¨)
      if (!tooltip.show) {
        setIsLoading(false);
      }
    }
  };

  // SMS Î°úÍ∑∏Ïù∏ Í¥ÄÎ†® Ìï®ÏàòÎì§
  const handlePhoneChange = (e) => {
    const value = e.target.value.replace(/[^0-9]/g, '');
    if (value.length <= 11) {
      setPhoneNumber(value);
    }
  };

  const formatPhoneNumber = (phone) => {
    if (phone.length <= 3) return phone;
    if (phone.length <= 7) return `${phone.slice(0, 3)}-${phone.slice(3)}`;
    return `${phone.slice(0, 3)}-${phone.slice(3, 7)}-${phone.slice(7)}`;
  };

  const sendVerificationCode = async () => {
    const { SMS, VALIDATION, MESSAGES } = TABLET_LOGIN_CONSTANTS;
    
    if (!phoneNumber || phoneNumber.length !== SMS.PHONE_LENGTH) {
      showTooltip(MESSAGES.PHONE_INVALID, 'error');
      return;
    }

    if (!phoneNumber.match(VALIDATION.PHONE_REGEX)) {
      showTooltip(MESSAGES.PHONE_INVALID, 'error');
      return;
    }

    try {
      const response = await fetch(TABLET_LOGIN_CONSTANTS.API_ENDPOINTS.SMS_SEND, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ phoneNumber }),
      });

      const data = await response.json();

      if (data.success) {
        console.log('SMS Ïù∏Ï¶ù ÏΩîÎìú Ï†ÑÏÜ° ÏÑ±Í≥µ:', data);
        setIsCodeSent(true);
        setCountdown(SMS.COUNTDOWN_DURATION);
        showTooltip(MESSAGES.SMS_SENT, 'success');
      } else {
        console.error('SMS Ï†ÑÏÜ° Ïã§Ìå®:', data.message);
        showTooltip(data.message || MESSAGES.SMS_SEND_FAILED, 'error');
      }
    } catch (error) {
      console.error('SMS Ï†ÑÏÜ° Ïò§Î•ò:', error);
      showTooltip(MESSAGES.SMS_SEND_FAILED, 'error');
    }
  };

  const verifyCode = async () => {
    const { SMS, VALIDATION, MESSAGES } = TABLET_LOGIN_CONSTANTS;
    
    if (!verificationCode || verificationCode.length !== SMS.CODE_LENGTH) {
      showTooltip(MESSAGES.CODE_INVALID, 'error');
      return;
    }

    if (!verificationCode.match(VALIDATION.PHONE_REGEX)) {
      showTooltip(MESSAGES.CODE_INVALID, 'error');
      return;
    }

    try {
      const response = await fetch(TABLET_LOGIN_CONSTANTS.API_ENDPOINTS.SMS_VERIFY, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          phoneNumber, 
          verificationCode 
        }),
      });

      const data = await response.json();

      if (data.success) {
        console.log('SMS Ïù∏Ï¶ù ÏÑ±Í≥µ:', data);
        showTooltip(MESSAGES.SMS_VERIFY_SUCCESS, 'success');
        // Ïù∏Ï¶ù ÏÑ±Í≥µ ÌõÑ Ï≤òÎ¶¨ - Î°úÍ∑∏Ïù∏ ÏôÑÎ£å ÎòêÎäî Îã§Ïùå Îã®Í≥ÑÎ°ú ÏßÑÌñâ
        await handleSmsAuthSuccess();
      } else {
        console.error('SMS Ïù∏Ï¶ù Ïã§Ìå®:', data.message);
        showTooltip(data.message || MESSAGES.SMS_VERIFY_FAILED, 'error');
      }
    } catch (error) {
      console.error('SMS Í≤ÄÏ¶ù Ïò§Î•ò:', error);
      showTooltip(MESSAGES.SMS_VERIFY_FAILED, 'error');
    }
  };

  // SMS Ïù∏Ï¶ù ÏÑ±Í≥µ ÌõÑ Ï≤òÎ¶¨
  const handleSmsAuthSuccess = async () => {
    try {
      console.log('‚úÖ SMS Ïù∏Ï¶ù ÏÑ±Í≥µ ÌõÑ Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨ ÏãúÏûë');
      
      // SMS Ïù∏Ï¶ù ÏÑ±Í≥µ Ïãú ÏûêÎèô Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨
      // Ï†ÑÌôîÎ≤àÌò∏Î°ú ÏÇ¨Ïö©Ïûê Ï°∞Ìöå ÌõÑ Î°úÍ∑∏Ïù∏
      const loginData = {
        phoneNumber: formData.phoneNumber,
        loginType: 'SMS_AUTH'
      };
      
      const response = await fetch('/api/auth/sms-login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(loginData)
      });
      
      const data = await response.json();
      
      if (data.success) {
        console.log('‚úÖ SMS Ïù∏Ï¶ù Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ:', data);
        showTooltip('SMS Ïù∏Ï¶ù Î°úÍ∑∏Ïù∏Ïóê ÏÑ±Í≥µÌñàÏäµÎãàÎã§.', 'success');
        
        // Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ ÌõÑ Î¶¨Îã§Ïù¥Î†âÌä∏
        if (data.user) {
          // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï†ÄÏû•
          sessionStorage.setItem('user', JSON.stringify(data.user));
          sessionStorage.setItem('accessToken', data.accessToken);
          
          // Ïó≠Ìï†Ïóê Îî∞Î•∏ Î¶¨Îã§Ïù¥Î†âÌä∏
          const userRole = data.user.role;
          const dashboardPath = getDashboardPath(userRole);
          window.location.href = dashboardPath;
        }
      } else {
        console.error('‚ùå SMS Ïù∏Ï¶ù Î°úÍ∑∏Ïù∏ Ïã§Ìå®:', data.message);
        showTooltip(data.message || 'SMS Ïù∏Ï¶ù Î°úÍ∑∏Ïù∏Ïù¥ Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'error');
        
        // Î°úÍ∑∏Ïù∏ Ïã§Ìå® Ïãú ÌöåÏõêÍ∞ÄÏûÖ ÏïàÎÇ¥
        if (data.message && data.message.includes('ÌöåÏõêÍ∞ÄÏûÖ')) {
          showTooltip('ÌöåÏõêÍ∞ÄÏûÖÏù¥ ÌïÑÏöîÌï©ÎãàÎã§. ÌöåÏõêÍ∞ÄÏûÖÏùÑ ÏßÑÌñâÌï¥Ï£ºÏÑ∏Ïöî.', 'info');
          // ÌöåÏõêÍ∞ÄÏûÖ Î™®Îã¨ ÌëúÏãú ÎòêÎäî ÌöåÏõêÍ∞ÄÏûÖ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
        }
      }
      
    } catch (error) {
      console.error('‚ùå SMS Ïù∏Ï¶ù ÏÑ±Í≥µ ÌõÑ Ï≤òÎ¶¨ Ïò§Î•ò:', error);
      showTooltip('SMS Ïù∏Ï¶ù ÌõÑ Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', 'error');
    }
  };

  const handleKakaoLogin = async () => {
    await kakaoLogin();
  };

  const handleNaverLogin = async () => {
    await naverLogin();
  };


  const checkOAuthCallback = async () => {
    console.log('üîç checkOAuthCallback Ìï®Ïàò Ïã§ÌñâÎê®');
    console.log('üìç ÌòÑÏû¨ URL:', window.location.href);
    console.log('üîó URL Í≤ÄÏÉâ ÌååÎùºÎØ∏ÌÑ∞:', window.location.search);
    console.log('üîç Ïª¥Ìè¨ÎÑåÌä∏ ÏÉÅÌÉú:', { showSocialSignupModal, socialUserInfo });
    
    const urlParams = new URLSearchParams(window.location.search);
    const code = urlParams.get('code');
    const state = urlParams.get('state');
    const provider = urlParams.get('provider');
    const signupRequired = urlParams.get('signup');
    const error = urlParams.get('error');
    
    console.log('üìã ÌååÏã±Îêú URL ÌååÎùºÎØ∏ÌÑ∞:', {
      code: code ? 'ÏûàÏùå' : 'ÏóÜÏùå',
      state: state ? 'ÏûàÏùå' : 'ÏóÜÏùå',
      provider: provider || 'ÏóÜÏùå',
      signupRequired: signupRequired || 'ÏóÜÏùå',
      error: error ? 'ÏûàÏùå' : 'ÏóÜÏùå'
    });
    
    // ÏóêÎü¨ ÌååÎùºÎØ∏ÌÑ∞Í∞Ä ÏûàÏúºÎ©¥ ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÌëúÏãú
    if (error) {
      console.log('‚ùå ÏóêÎü¨ ÌååÎùºÎØ∏ÌÑ∞ Í∞êÏßÄ:', error);
      const decodedError = decodeURIComponent(error);
      console.log('üî§ ÎîîÏΩîÎî©Îêú ÏóêÎü¨ Î©îÏãúÏßÄ:', decodedError);
      
      // ÏóêÎü¨ Î©îÏãúÏßÄÏóê "Í∞ÑÌé∏ ÌöåÏõêÍ∞ÄÏûÖÏù¥ ÌïÑÏöîÌï©ÎãàÎã§"Í∞Ä Ìè¨Ìï®ÎêòÏñ¥ ÏûàÏúºÎ©¥ Î™®Îã¨ ÌëúÏãú
      if (decodedError.includes('Í∞ÑÌé∏ ÌöåÏõêÍ∞ÄÏûÖÏù¥ ÌïÑÏöîÌï©ÎãàÎã§')) {
        console.log('üîç Í∞ÑÌé∏ ÌöåÏõêÍ∞ÄÏûÖ ÌïÑÏöî Í∞êÏßÄ - ÏóêÎü¨ Î©îÏãúÏßÄÏóêÏÑú');
        
        // URLÏóêÏÑú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÌååÏã±
        const urlProvider = urlParams.get('provider');
        const urlEmail = urlParams.get('email');
        const urlName = urlParams.get('name');
        const urlNickname = urlParams.get('nickname');
        
        console.log('üìã URLÏóêÏÑú ÌååÏã±Îêú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥:', {
          provider: urlProvider,
          email: urlEmail,
          name: urlName,
          nickname: urlNickname
        });
        
        // Ïπ¥Ïπ¥Ïò§ ÎòêÎäî ÎÑ§Ïù¥Î≤ÑÎ°ú Ï∂îÏ†ï (ÏóêÎü¨ Î©îÏãúÏßÄÏóêÏÑú ÌåêÎã®)
        const detectedProvider = decodedError.includes('Ïπ¥Ïπ¥Ïò§') ? 'kakao' : 'naver';
        
      const socialUserInfo = {
        provider: (urlProvider || detectedProvider).toUpperCase(), // ÎåÄÎ¨∏ÏûêÎ°ú Î≥ÄÌôò
        email: urlEmail || '',
        name: urlName || '',
        nickname: urlNickname || '',
        providerUserId: '',
        profileImageUrl: ''
      };
        
        console.log('üë§ ÏÜåÏÖú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏÑ§Ï†ï:', socialUserInfo);
        
        // ÏïåÎ¶º ÌëúÏãú
        showTooltip(`${socialUserInfo.provider === 'KAKAO' ? 'Ïπ¥Ïπ¥Ïò§' : 'ÎÑ§Ïù¥Î≤Ñ'} Î°úÍ∑∏Ïù∏: Í∞ÑÌé∏ ÌöåÏõêÍ∞ÄÏûÖÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.`, 'warning');
        
        setSocialUserInfo(socialUserInfo);
        setShowSocialSignupModal(true);
        
        console.log('üìã Î™®Îã¨ ÏÉÅÌÉú ÏÑ§Ï†ï ÏôÑÎ£å - showSocialSignupModal: true');
      } else {
        // ÏùºÎ∞ò ÏóêÎü¨Îäî ÌÜ†Ïä§Ìä∏Î°úÎßå ÌëúÏãú
        showTooltip(decodedError, 'error');
      }
      
      // URLÏóêÏÑú ÏóêÎü¨ ÌååÎùºÎØ∏ÌÑ∞ Ï†úÍ±∞
      window.history.replaceState({}, document.title, '/login');
      console.log('üßπ URLÏóêÏÑú ÏóêÎü¨ ÌååÎùºÎØ∏ÌÑ∞ Ï†úÍ±∞Îê®');
      return;
    }
    
    // Í∞ÑÌé∏ ÌöåÏõêÍ∞ÄÏûÖ ÌïÑÏöî ÌååÎùºÎØ∏ÌÑ∞Í∞Ä ÏûàÏúºÎ©¥ Î™®Îã¨ ÌëúÏãú
    if (signupRequired === 'required' && provider) {
      console.log('üîç Í∞ÑÌé∏ ÌöåÏõêÍ∞ÄÏûÖ ÌïÑÏöî Í∞êÏßÄ - signup=required ÌååÎùºÎØ∏ÌÑ∞:', { signupRequired, provider });
      console.log('üéØ Î™®Îã¨ ÌëúÏãú Ï°∞Í±¥ Ï∂©Ï°± - signupRequired:', signupRequired, 'provider:', provider);
      
      const email = urlParams.get('email');
      const name = urlParams.get('name');
      const nickname = urlParams.get('nickname');
      
      console.log('üìã URLÏóêÏÑú ÌååÏã±Îêú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥:', {
        email: email || 'ÏóÜÏùå',
        name: name || 'ÏóÜÏùå',
        nickname: nickname || 'ÏóÜÏùå'
      });
      
      const socialUserInfo = {
        provider: provider.toUpperCase(), // ÎåÄÎ¨∏ÏûêÎ°ú Î≥ÄÌôò
        email: email || '',
        name: name || '',
        nickname: nickname || '',
        providerUserId: '', // URLÏóêÏÑú Ï†ÑÎã¨Ìï† Ïàò ÏóÜÏúºÎØÄÎ°ú Îπà Í∞í
        profileImageUrl: ''
      };
      
      console.log('üë§ ÏÜåÏÖú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏÑ§Ï†ï:', socialUserInfo);
      
      // ÏïåÎ¶º ÌëúÏãú
      showTooltip(`${provider.toUpperCase() === 'KAKAO' ? 'Ïπ¥Ïπ¥Ïò§' : 'ÎÑ§Ïù¥Î≤Ñ'} Î°úÍ∑∏Ïù∏: Í∞ÑÌé∏ ÌöåÏõêÍ∞ÄÏûÖÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.`, 'warning');
      
      console.log('üìã Î™®Îã¨ ÏÉÅÌÉú ÏÑ§Ï†ï ÏãúÏûë - socialUserInfo:', socialUserInfo);
      setSocialUserInfo(socialUserInfo);
      setShowSocialSignupModal(true);
      
      console.log('üìã Î™®Îã¨ ÏÉÅÌÉú ÏÑ§Ï†ï ÏôÑÎ£å - showSocialSignupModal: true');
      console.log('üìã ÌòÑÏû¨ ÏÉÅÌÉú ÌôïÏù∏:', { 
        showSocialSignupModal: true, 
        socialUserInfo: socialUserInfo 
      });
      
      // URLÏóêÏÑú ÌååÎùºÎØ∏ÌÑ∞ Ï†úÍ±∞ (Î™®Îã¨Ïù¥ ÌëúÏãúÎêú ÌõÑÏóê Ï†úÍ±∞)
      setTimeout(() => {
        window.history.replaceState({}, document.title, '/login');
      }, 100);
      return;
    }
    
    // OAuth2 ÏΩúÎ∞± Ï≤òÎ¶¨
    if (code && state && provider) {
      try {
        const result = await socialHandleOAuthCallback(provider, code, state);
        if (result?.requiresSignup) {
          setSocialUserInfo(result.socialUserInfo);
          setShowSocialSignupModal(true);
          window.history.replaceState({}, document.title, '/login');
        }
      } catch (error) {
        console.error('OAuth2 ÏΩúÎ∞± Ï≤òÎ¶¨ Ïò§Î•ò:', error);
        
        // ÏóêÎü¨ Î©îÏãúÏßÄÎ•º ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÌëúÏãú
        let errorMessage = 'ÏÜåÏÖú Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.';
        
        if (error.message.includes('state Í≤ÄÏ¶ù Ïã§Ìå®')) {
          errorMessage = 'Î≥¥Ïïà Í≤ÄÏ¶ùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.';
        } else if (error.message.includes('ÏÑ∏ÏÖò ÏÑ§Ï†ï')) {
          errorMessage = 'Î°úÍ∑∏Ïù∏ ÏÑ∏ÏÖò ÏÑ§Ï†ïÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.';
        } else if (error.message.includes('OAuth2 Ïù∏Ï¶ù Ïã§Ìå®')) {
          errorMessage = 'ÏÜåÏÖú Ïù∏Ï¶ùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.';
        }
        
        showTooltip(errorMessage, 'error');
        
        // URLÏóêÏÑú OAuth2 ÌååÎùºÎØ∏ÌÑ∞ Ï†úÍ±∞
        window.history.replaceState({}, document.title, '/login');
      }
    }
  };

  const handleSocialSignupSuccess = async (response) => {
    setShowSocialSignupModal(false);
    setSocialUserInfo(null);
    console.log('Í∞ÑÌé∏ ÌöåÏõêÍ∞ÄÏûÖ ÏÑ±Í≥µ:', response.message);
    
    // ÌöåÏõêÍ∞ÄÏûÖ ÏÑ±Í≥µ ÌõÑ ÎåÄÏãúÎ≥¥ÎìúÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏
    if (response.userInfo) {
      // ÏÑ∏ÏÖò ÏÑ§Ï†ï
      // Ï§ëÏïô ÏÑ∏ÏÖòÏóê ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏÑ§Ï†ï
      console.log('üîÑ Í∞ÑÌé∏ ÌöåÏõêÍ∞ÄÏûÖ - Ï§ëÏïô ÏÑ∏ÏÖò ÏÑ§Ï†ï ÏãúÏûë...');
      const loginSuccess = await login(response.userInfo, {
        accessToken: response.accessToken,
        refreshToken: response.refreshToken
      });
      
      if (loginSuccess) {
        // ÏÑ∏ÏÖò ÏÑ§Ï†ï ÏôÑÎ£å ÌõÑ Ïû†Ïãú ÎåÄÍ∏∞
        console.log('‚è≥ Í∞ÑÌé∏ ÌöåÏõêÍ∞ÄÏûÖ - ÏÑ∏ÏÖò ÏÑ§Ï†ï ÏôÑÎ£å, Ïû†Ïãú ÎåÄÍ∏∞...');
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Ïó≠Ìï†Ïóê Îî∞Î•∏ ÎåÄÏãúÎ≥¥ÎìúÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏
        const dashboardPath = getDashboardPath(response.userInfo.role);
        console.log('‚úÖ Í∞ÑÌé∏ ÌöåÏõêÍ∞ÄÏûÖ ÏÑ±Í≥µ, ÎåÄÏãúÎ≥¥ÎìúÎ°ú Ïù¥Îèô:', dashboardPath);
        navigate(dashboardPath, { replace: true });
      } else {
        console.log('‚ùå Í∞ÑÌé∏ ÌöåÏõêÍ∞ÄÏûÖ - ÏÑ∏ÏÖò ÏÑ§Ï†ï Ïã§Ìå®');
        alert('ÏÑ∏ÏÖò ÏÑ§Ï†ïÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }
    } else {
      // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Í∞Ä ÏóÜÏúºÎ©¥ ÏÉàÎ°úÍ≥†Ïπ®
      window.location.reload();
    }
  };

  const toggleLoginMode = () => {
    setSmsMode(!smsMode);
    setFormData({ email: '', password: '' });
    setPhoneNumber('');
    setVerificationCode('');
    setIsCodeSent(false);
    setCountdown(0);
  };

  const handleHamburgerToggle = () => {
    console.log('üçî ÌñÑÎ≤ÑÍ±∞ Î©îÎâ¥ ÌÜ†Í∏Ä');
    
    // ÌñÑÎ≤ÑÍ±∞ Î©îÎâ¥ ÏÉÅÌÉú ÌÜ†Í∏Ä
    setIsHamburgerMenuOpen(prev => !prev);
    
    // ÌñÑÎ≤ÑÍ±∞ Î©îÎâ¥ Ïï†ÎãàÎ©îÏù¥ÏÖò Ìö®Í≥º
    const hamburgerIcon = document.querySelector('.hamburger-icon');
    if (hamburgerIcon) {
      hamburgerIcon.classList.toggle('active');
    }
    
    // Î©îÎâ¥ Ìï≠Î™©Îì§Ïóê ÎåÄÌïú Ï†ëÍ∑ºÏÑ± Ï≤òÎ¶¨
    const menuItems = document.querySelectorAll('.hamburger-menu-item');
    menuItems.forEach(item => {
      if (isHamburgerMenuOpen) {
        item.setAttribute('tabindex', '-1');
        item.setAttribute('aria-hidden', 'true');
      } else {
        item.setAttribute('tabindex', '0');
        item.setAttribute('aria-hidden', 'false');
      }
    });
  };

  const handleProfileClick = () => {
    console.log('üë§ ÌîÑÎ°úÌïÑ ÌÅ¥Î¶≠');
    
    // Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú ÌôïÏù∏
    const user = JSON.parse(sessionStorage.getItem('user') || 'null');
    
    if (user) {
      // Î°úÍ∑∏Ïù∏Îêú ÏÇ¨Ïö©ÏûêÏùò Í≤ΩÏö∞ ÌîÑÎ°úÌïÑ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
      const userRole = user.role;
      let profileUrl = '/profile';
      
      // Ïó≠Ìï†Ïóê Îî∞Î•∏ ÌîÑÎ°úÌïÑ ÌéòÏù¥ÏßÄ ÏÑ§Ï†ï
      switch (userRole) {
        case 'ADMIN':
        case 'SUPER_ADMIN':
          profileUrl = '/admin/profile';
          break;
        case 'CONSULTANT':
          profileUrl = '/consultant/profile';
          break;
        case 'CLIENT':
          profileUrl = '/client/profile';
          break;
        default:
          profileUrl = '/profile';
      }
      
      console.log(`üë§ ÌîÑÎ°úÌïÑ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô: ${profileUrl}`);
      window.location.href = profileUrl;
      
    } else {
      // Î°úÍ∑∏Ïù∏ÎêòÏßÄ ÏïäÏùÄ ÏÇ¨Ïö©ÏûêÏùò Í≤ΩÏö∞ Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
      console.log('üë§ Î°úÍ∑∏Ïù∏ÎêòÏßÄ ÏïäÏùÄ ÏÇ¨Ïö©Ïûê - Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô');
      showTooltip('Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.', 'info');
      
      // ÌòÑÏû¨ ÌéòÏù¥ÏßÄÍ∞Ä Ïù¥ÎØ∏ Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÏù∏ÏßÄ ÌôïÏù∏
      if (!window.location.pathname.includes('/login')) {
        window.location.href = '/login';
      }
    }
  };

  return (
    <div className={TABLET_LOGIN_CSS.CONTAINER}>
      <div className={TABLET_LOGIN_CSS.CONTENT}>
          <div className={TABLET_LOGIN_CSS.HEADER}>
            <h1 className={TABLET_LOGIN_CSS.TITLE}>MindGarden Î°úÍ∑∏Ïù∏</h1>
            <p className={TABLET_LOGIN_CSS.SUBTITLE}>ÎßàÏùåÏùò Ï†ïÏõêÏóê Ïò§Ïã† Í≤ÉÏùÑ ÌôòÏòÅÌï©ÎãàÎã§</p>
          </div>

          <div className={TABLET_LOGIN_CSS.MODE_SWITCH}>
            <button 
              className={`${TABLET_LOGIN_CSS.MODE_BUTTON} ${!smsMode ? TABLET_LOGIN_CSS.MODE_ACTIVE : ''}`}
              onClick={() => setSmsMode(false)}
            >
              <i className="bi bi-envelope"></i>
              Ïù¥Î©îÏùº Î°úÍ∑∏Ïù∏
            </button>
            <button 
              className={`${TABLET_LOGIN_CSS.MODE_BUTTON} ${smsMode ? TABLET_LOGIN_CSS.MODE_ACTIVE : ''}`}
              onClick={() => setSmsMode(true)}
            >
              <i className="bi bi-phone"></i>
              SMS Î°úÍ∑∏Ïù∏
            </button>
          </div>

          {!smsMode ? (
            /* Ïù¥Î©îÏùº Î°úÍ∑∏Ïù∏ Ìèº */
            <form className={TABLET_LOGIN_CSS.FORM} onSubmit={handleSubmit}>
              <div className={TABLET_LOGIN_CSS.FORM_GROUP}>
                <label className={TABLET_LOGIN_CSS.LABEL}>
                  <i className="bi bi-envelope"></i>
                  Ïù¥Î©îÏùº
                </label>
                <input
                  type="email"
                  name="email"
                  value={formData.email}
                  onChange={handleInputChange}
                  className={TABLET_LOGIN_CSS.INPUT}
                  placeholder="Ïù¥Î©îÏùºÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                  required
                />
              </div>

              <div className={TABLET_LOGIN_CSS.FORM_GROUP}>
                <label className={TABLET_LOGIN_CSS.LABEL}>
                  <i className="bi bi-lock"></i>
                  ÎπÑÎ∞ÄÎ≤àÌò∏
                </label>
                <div className={TABLET_LOGIN_CSS.INPUT_GROUP}>
                  <input
                    type={showPassword ? 'text' : 'password'}
                    name="password"
                    value={formData.password}
                    onChange={handleInputChange}
                    className={TABLET_LOGIN_CSS.INPUT}
                    placeholder="ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                    required
                  />
                  <button
                    type="button"
                    className={TABLET_LOGIN_CSS.PASSWORD_TOGGLE}
                    onClick={togglePassword}
                  >
                    <i className={`bi ${showPassword ? 'bi-eye-slash' : 'bi-eye'}`}></i>
                  </button>
                </div>
              </div>

              <button
                type="submit"
                className={`${TABLET_LOGIN_CSS.BUTTON} ${TABLET_LOGIN_CSS.BUTTON_PRIMARY}`}
                disabled={isLoading}
              >
                {isLoading ? (
                  <>
                    <span className={TABLET_LOGIN_CSS.LOADING}></span>
                    Î°úÍ∑∏Ïù∏ Ï§ë...
                  </>
                ) : (
                  'Î°úÍ∑∏Ïù∏'
                )}
              </button>
              
              {/* ÎπÑÎ∞ÄÎ≤àÌò∏ Ï∞æÍ∏∞ ÎßÅÌÅ¨ */}
              <div style={{
                textAlign: 'center',
                marginTop: '16px',
                paddingTop: '16px',
                borderTop: '1px solid #e2e8f0'
              }}>
                <button
                  type="button"
                  onClick={() => navigate('/forgot-password')}
                  style={{
                    background: 'none',
                    border: 'none',
                    color: '#667eea',
                    fontSize: '14px',
                    fontWeight: '500',
                    cursor: 'pointer',
                    textDecoration: 'underline',
                    fontFamily: "'Noto Sans KR', 'Malgun Gothic', 'ÎßëÏùÄ Í≥†Îîï', sans-serif",
                    transition: 'color 0.2s ease'
                  }}
                  onMouseEnter={(e) => {
                    e.target.style.color = '#5a67d8';
                  }}
                  onMouseLeave={(e) => {
                    e.target.style.color = '#667eea';
                  }}
                >
                  ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûäÏúºÏÖ®ÎÇòÏöî?
                </button>
              </div>
            </form>
          ) : (
            /* SMS Î°úÍ∑∏Ïù∏ Ìèº */
            <div className={TABLET_LOGIN_CSS.SMS_SECTION}>
              <div className={TABLET_LOGIN_CSS.FORM_GROUP}>
                <label className={TABLET_LOGIN_CSS.LABEL}>
                  <i className="bi bi-phone"></i>
                  Ìú¥ÎåÄÌè∞ Î≤àÌò∏
                </label>
                <div className={TABLET_LOGIN_CSS.INPUT_GROUP}>
                  <input
                    type="tel"
                    value={formatPhoneNumber(phoneNumber)}
                    onChange={handlePhoneChange}
                    className={TABLET_LOGIN_CSS.INPUT}
                    placeholder="010-0000-0000"
                    maxLength="13"
                  />
                  <button
                    type="button"
                    className={TABLET_LOGIN_CSS.SMS_BUTTON}
                    onClick={sendVerificationCode}
                    disabled={isCodeSent && countdown > 0}
                  >
                    {isCodeSent && countdown > 0 
                      ? `${Math.floor(countdown / 60)}:${(countdown % 60).toString().padStart(2, '0')}`
                      : 'Ïù∏Ï¶ùÎ≤àÌò∏ Ï†ÑÏÜ°'
                    }
                  </button>
                </div>
              </div>

              {isCodeSent && (
                <div className={TABLET_LOGIN_CSS.FORM_GROUP}>
                  <label className={TABLET_LOGIN_CSS.LABEL}>
                    <i className="bi bi-shield-check"></i>
                    Ïù∏Ï¶ù ÏΩîÎìú
                  </label>
                  <div className={TABLET_LOGIN_CSS.SMS_VERIFICATION}>
                    <input
                      type="text"
                      value={verificationCode}
                      onChange={(e) => setVerificationCode(e.target.value.replace(/[^0-9]/g, ''))}
                      className={TABLET_LOGIN_CSS.VERIFICATION_INPUT}
                      placeholder="6ÏûêÎ¶¨ Ïù∏Ï¶ù ÏΩîÎìú"
                      maxLength="6"
                    />
                    <button
                      type="button"
                      className={TABLET_LOGIN_CSS.VERIFICATION_BUTTON}
                      onClick={verifyCode}
                    >
                      Ïù∏Ï¶ù
                    </button>
                  </div>
                </div>
              )}

              <button
                type="button"
                className={`${TABLET_LOGIN_CSS.BUTTON} ${TABLET_LOGIN_CSS.BUTTON_SECONDARY}`}
                disabled={!isCodeSent || !verificationCode}
              >
                SMS Î°úÍ∑∏Ïù∏
              </button>
            </div>
          )}

          <div className={TABLET_LOGIN_CSS.DIVIDER}>
            <span>ÎòêÎäî</span>
          </div>

          <div className={TABLET_LOGIN_CSS.SOCIAL_BUTTONS}>
            <button
              className={`${TABLET_LOGIN_CSS.SOCIAL_BUTTON} kakao`}
              onClick={handleKakaoLogin}
              disabled={!oauth2Config?.kakao}
            >
              <i className="bi bi-chat-dots"></i>
              Ïπ¥Ïπ¥Ïò§Î°ú Î°úÍ∑∏Ïù∏
            </button>
            <button
              className={`${TABLET_LOGIN_CSS.SOCIAL_BUTTON} naver`}
              onClick={handleNaverLogin}
              disabled={!oauth2Config?.naver}
            >
              <i className="bi bi-n"></i>
              ÎÑ§Ïù¥Î≤ÑÎ°ú Î°úÍ∑∏Ïù∏
            </button>
          </div>

          <div className={TABLET_LOGIN_CSS.FOOTER}>
            <p className="register-link">
              Í≥ÑÏ†ïÏù¥ ÏóÜÏúºÏã†Í∞ÄÏöî?{' '}
              <button
                type="button"
                className={TABLET_LOGIN_CSS.FOOTER_LINK}
                onClick={() => navigate('/register')}
              >
                ÌöåÏõêÍ∞ÄÏûÖ
              </button>
            </p>
          </div>
        </div>

      {console.log('üîç SocialSignupModal Î†åÎçîÎßÅ Ï≤¥ÌÅ¨:', { 
        showSocialSignupModal, 
        socialUserInfo,
        isOpen: showSocialSignupModal 
      })}
      <SocialSignupModal
        isOpen={showSocialSignupModal}
        onClose={() => {
          console.log('üìã Î™®Îã¨ Îã´Í∏∞ Î≤ÑÌäº ÌÅ¥Î¶≠');
          setShowSocialSignupModal(false);
        }}
        socialUser={socialUserInfo}
        onSignupSuccess={handleSocialSignupSuccess}
      />

      {/* Ï†ÑÎ¨∏Ï†ÅÏù∏ Î°úÍ∑∏Ïù∏ ÏïåÎ¶º (CSS Ï∂©Îèå Î∞©ÏßÄÏö©) */}
      {tooltip.show && (
        <>
          <style>{`
            @keyframes loginNotificationSlideIn {
              from { 
                transform: translate(-50%, -60%) scale(0.8);
                opacity: 0;
              }
              to { 
                transform: translate(-50%, -50%) scale(1);
                opacity: 1;
              }
            }
            @keyframes loginNotificationPulse {
              0%, 100% { transform: translate(-50%, -50%) scale(1); }
              50% { transform: translate(-50%, -50%) scale(1.02); }
            }
          `}</style>
          <div
            style={{
              position: 'fixed',
              top: '20%',
              left: '50%',
              transform: 'translate(-50%, -50%)',
              backgroundColor: '#ffffff',
              color: '#333333',
              padding: '28px 56px',
              borderRadius: '12px',
              boxShadow: '0 4px 20px rgba(0, 0, 0, 0.08)',
              zIndex: 10001,
              fontSize: '15px',
              fontWeight: '400',
              fontFamily: "'Noto Sans KR', 'Malgun Gothic', 'ÎßëÏùÄ Í≥†Îîï', sans-serif",
              width: '520px',
              maxWidth: '85vw',
              textAlign: 'center',
              cursor: 'pointer',
              border: '1px solid #e9ecef',
              animation: 'loginNotificationSlideIn 0.4s ease-out'
            }}
            onClick={() => setTooltip({ show: false, message: '', type: 'error' })}
          >
            
            
            {/* Î©îÏãúÏßÄ */}
            <div style={{ 
              fontSize: '16px',
              fontWeight: '500',
              marginBottom: '8px',
              color: '#495057',
              lineHeight: '1.5',
              letterSpacing: '0.2px'
            }}>
              {tooltip.message}
            </div>
            
            {/* Îã´Í∏∞ ÏïàÎÇ¥ */}
            <div style={{ 
              fontSize: '13px',
              color: '#6c757d',
              fontWeight: '400',
              opacity: 0.8,
              marginTop: '12px'
            }}>
              ÌÑ∞ÏπòÌïòÏó¨ Îã´Í∏∞
            </div>
          </div>
          
          {/* Î∞∞Í≤Ω Ïò§Î≤ÑÎ†àÏù¥ */}
          <div
            style={{
              position: 'fixed',
              top: 0,
              left: 0,
              right: 0,
              bottom: 0,
              backgroundColor: 'rgba(0, 0, 0, 0.1)',
              zIndex: 10000,
              backdropFilter: 'blur(0.5px)'
            }}
            onClick={() => setTooltip({ show: false, message: '', type: 'error' })}
          />
        </>
      )}
    </div>
  );
};

// Í∞ÑÎã®Ìïú Ìà¥ÌåÅ Ï†ÑÏö© (CSS Ï∂©Îèå ÏôÑÏ†Ñ Î∞©ÏßÄ)

export default TabletLogin;
