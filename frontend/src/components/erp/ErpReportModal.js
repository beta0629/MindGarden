import React, { useState, useEffect } from 'react';
import UnifiedLoading from '../common/UnifiedLoading';
import { apiGet } from '../../utils/ajax';
import notificationManager from '../../utils/notification';
import './ErpReportModal.css';

/**
 * ERP Î≥¥Í≥†ÏÑú Î™®Îã¨ Ïª¥Ìè¨ÎÑåÌä∏
 * - ÏõîÎ≥Ñ/Î∂ÑÍ∏∞Î≥Ñ/Ïó∞Î≥Ñ Î≥¥Í≥†ÏÑú ÏÉùÏÑ±
 * - Î≥¥Í≥†ÏÑú Îã§Ïö¥Î°úÎìú Í∏∞Îä•
 * 
 * @author MindGarden
 * @version 1.0.0
 * @since 2025-09-30
 */
const ErpReportModal = ({ isOpen, onClose }) => {
    const [loading, setLoading] = useState(false);
    const [reportType, setReportType] = useState('monthly');
    const [period, setPeriod] = useState('');
    const [branchCode, setBranchCode] = useState('');
    const [reportData, setReportData] = useState(null);
    const [branches, setBranches] = useState([]);

    useEffect(() => {
        if (isOpen) {
            loadBranches();
            // ÌòÑÏû¨ ÏõîÎ°ú Ï¥àÍ∏∞Ìôî
            const now = new Date();
            setPeriod(`${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`);
        }
    }, [isOpen]);

    /**
     * ÏßÄÏ†ê Î™©Î°ù Î°úÎìú
     */
    const loadBranches = async () => {
        try {
            const response = await apiGet('/api/branches');
            if (response && response.success !== false) {
                setBranches(response.data || []);
            }
        } catch (error) {
            console.error('ÏßÄÏ†ê Î™©Î°ù Î°úÎìú Ïã§Ìå®:', error);
        }
    };

    /**
     * Î≥¥Í≥†ÏÑú ÏÉùÏÑ±
     */
    const handleGenerateReport = async () => {
        if (!period) {
            notificationManager.error('Í∏∞Í∞ÑÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
            return;
        }

        try {
            setLoading(true);
            
            const params = new URLSearchParams({
                type: reportType,
                period: period,
                branchCode: branchCode || ''
            });

            const response = await apiGet(`/api/erp/reports?${params}`);
            
            if (response && response.success !== false) {
                setReportData(response.data);
                notificationManager.success('Î≥¥Í≥†ÏÑúÍ∞Ä ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.');
            } else {
                throw new Error(response?.message || 'Î≥¥Í≥†ÏÑú ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
            }

        } catch (error) {
            console.error('‚ùå Î≥¥Í≥†ÏÑú ÏÉùÏÑ± Ïã§Ìå®:', error);
            notificationManager.error(error.message || 'Î≥¥Í≥†ÏÑú ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
        } finally {
            setLoading(false);
        }
    };

    /**
     * Î≥¥Í≥†ÏÑú Îã§Ïö¥Î°úÎìú
     */
    const handleDownloadReport = async () => {
        if (!reportData) {
            notificationManager.error('Îã§Ïö¥Î°úÎìúÌï† Î≥¥Í≥†ÏÑúÍ∞Ä ÏóÜÏäµÎãàÎã§.');
            return;
        }

        try {
            const params = new URLSearchParams({
                type: reportType,
                period: period,
                branchCode: branchCode || '',
                format: 'excel'
            });

            const response = await fetch(`/api/erp/reports/download?${params}`, {
                method: 'GET',
                credentials: 'include'
            });

            if (response.ok) {
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `erp-report-${reportType}-${period}.xlsx`;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
                notificationManager.success('Î≥¥Í≥†ÏÑúÍ∞Ä Îã§Ïö¥Î°úÎìúÎêòÏóàÏäµÎãàÎã§.');
            } else {
                throw new Error('Îã§Ïö¥Î°úÎìúÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
            }

        } catch (error) {
            console.error('‚ùå Î≥¥Í≥†ÏÑú Îã§Ïö¥Î°úÎìú Ïã§Ìå®:', error);
            notificationManager.error(error.message || 'Îã§Ïö¥Î°úÎìú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
        }
    };

    /**
     * Î™®Îã¨ Îã´Í∏∞
     */
    const handleClose = () => {
        if (loading) return;
        setReportData(null);
        onClose();
    };

    if (!isOpen) return null;

    return (
        <div className="erp-report-modal-overlay">
            <div className="erp-report-modal">
                <div className="erp-report-modal-header">
                    <h3>üìä ERP Î≥¥Í≥†ÏÑú</h3>
                    <button 
                        className="erp-report-close-btn"
                        onClick={handleClose}
                        disabled={loading}
                    >
                        ‚úï
                    </button>
                </div>

                <div className="erp-report-modal-content">
                    {/* Î≥¥Í≥†ÏÑú ÏÑ§Ï†ï */}
                    <div className="report-settings">
                        <div className="form-group">
                            <label>Î≥¥Í≥†ÏÑú Ïú†Ìòï</label>
                            <div className="radio-group">
                                <label className="radio-item">
                                    <input
                                        type="radio"
                                        value="monthly"
                                        checked={reportType === 'monthly'}
                                        onChange={(e) => setReportType(e.target.value)}
                                        disabled={loading}
                                    />
                                    <span>ÏõîÎ≥Ñ Î≥¥Í≥†ÏÑú</span>
                                </label>
                                <label className="radio-item">
                                    <input
                                        type="radio"
                                        value="quarterly"
                                        checked={reportType === 'quarterly'}
                                        onChange={(e) => setReportType(e.target.value)}
                                        disabled={loading}
                                    />
                                    <span>Î∂ÑÍ∏∞Î≥Ñ Î≥¥Í≥†ÏÑú</span>
                                </label>
                                <label className="radio-item">
                                    <input
                                        type="radio"
                                        value="yearly"
                                        checked={reportType === 'yearly'}
                                        onChange={(e) => setReportType(e.target.value)}
                                        disabled={loading}
                                    />
                                    <span>Ïó∞Î≥Ñ Î≥¥Í≥†ÏÑú</span>
                                </label>
                            </div>
                        </div>

                        <div className="form-group">
                            <label htmlFor="period">Í∏∞Í∞Ñ ÏÑ†ÌÉù</label>
                            {reportType === 'monthly' && (
                                <input
                                    type="month"
                                    id="period"
                                    value={period}
                                    onChange={(e) => setPeriod(e.target.value)}
                                    disabled={loading}
                                />
                            )}
                            {reportType === 'quarterly' && (
                                <select
                                    id="period"
                                    value={period}
                                    onChange={(e) => setPeriod(e.target.value)}
                                    disabled={loading}
                                >
                                    <option key="quarter-default" value="">Î∂ÑÍ∏∞Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</option>
                                    <option key="2025-Q1" value="2025-Q1">2025ÎÖÑ 1Î∂ÑÍ∏∞</option>
                                    <option key="2025-Q2" value="2025-Q2">2025ÎÖÑ 2Î∂ÑÍ∏∞</option>
                                    <option key="2025-Q3" value="2025-Q3">2025ÎÖÑ 3Î∂ÑÍ∏∞</option>
                                    <option key="2025-Q4" value="2025-Q4">2025ÎÖÑ 4Î∂ÑÍ∏∞</option>
                                </select>
                            )}
                            {reportType === 'yearly' && (
                                <select
                                    id="period"
                                    value={period}
                                    onChange={(e) => setPeriod(e.target.value)}
                                    disabled={loading}
                                >
                                    <option key="year-default" value="">Ïó∞ÎèÑÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</option>
                                    <option key="2025" value="2025">2025ÎÖÑ</option>
                                    <option key="2024" value="2024">2024ÎÖÑ</option>
                                    <option key="2023" value="2023">2023ÎÖÑ</option>
                                </select>
                            )}
                        </div>

                        <div className="form-group">
                            <label htmlFor="branch">ÏßÄÏ†ê ÏÑ†ÌÉù</label>
                            <select
                                id="branch"
                                value={branchCode}
                                onChange={(e) => setBranchCode(e.target.value)}
                                disabled={loading}
                            >
                                <option key="branch-default" value="">Ï†ÑÏ≤¥ ÏßÄÏ†ê</option>
                                {branches.map(branch => (
                                    <option key={branch.code} value={branch.code}>
                                        {branch.name}
                                    </option>
                                ))}
                            </select>
                        </div>

                        <button 
                            className="btn-generate"
                            onClick={handleGenerateReport}
                            disabled={loading || !period}
                        >
                            {loading ? 'ÏÉùÏÑ± Ï§ë...' : 'Î≥¥Í≥†ÏÑú ÏÉùÏÑ±'}
                        </button>
                    </div>

                    {/* Î≥¥Í≥†ÏÑú Í≤∞Í≥º */}
                    {reportData && (
                        <div className="report-results">
                            <div className="report-header">
                                <h4>Î≥¥Í≥†ÏÑú Í≤∞Í≥º</h4>
                                <button 
                                    className="btn-download"
                                    onClick={handleDownloadReport}
                                >
                                    üì• Îã§Ïö¥Î°úÎìú
                                </button>
                            </div>

                            <div className="report-summary">
                                <div className="summary-item">
                                    <span className="label">Ï¥ù ÏàòÏùµ</span>
                                    <span className="value revenue">
                                        {reportData.summary?.totalRevenue?.toLocaleString() || 0}Ïõê
                                    </span>
                                </div>
                                <div className="summary-item">
                                    <span className="label">Ï¥ù ÏßÄÏ∂ú</span>
                                    <span className="value expense">
                                        {reportData.summary?.totalExpenses?.toLocaleString() || 0}Ïõê
                                    </span>
                                </div>
                                <div className="summary-item">
                                    <span className="label">ÏàúÏù¥Ïùµ</span>
                                    <span className="value profit">
                                        {reportData.summary?.netProfit?.toLocaleString() || 0}Ïõê
                                    </span>
                                </div>
                                <div className="summary-item">
                                    <span className="label">Í±∞Îûò Í±¥Ïàò</span>
                                    <span className="value">
                                        {reportData.summary?.transactionCount || 0}Í±¥
                                    </span>
                                </div>
                            </div>

                            {/* Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Î∂ÑÏÑù */}
                            {reportData.categoryBreakdown && reportData.categoryBreakdown.length > 0 && (
                                <div className="category-breakdown">
                                    <h5>Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Î∂ÑÏÑù</h5>
                                    <div className="category-list">
                                        {reportData.categoryBreakdown.map((item, index) => (
                                            <div key={index} className="category-item">
                                                <span className="category-name">{item.category}</span>
                                                <span className="category-amount">
                                                    {item.amount?.toLocaleString() || 0}Ïõê
                                                </span>
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            )}
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default ErpReportModal;
