name: 🚀 MindGarden 운영 배포

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    name: 🏗️ 빌드 및 배포
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: ☕ Java 17 설정
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 📦 Node.js 18 설정
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: 🔧 Maven 캐시 설정
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: 🏗️ 백엔드 빌드
      run: mvn clean package -DskipTests
      
    - name: 📦 프론트엔드 의존성 설치
      run: |
        cd frontend
        npm ci
        
    - name: 🏗️ 프론트엔드 빌드
      run: |
        cd frontend
        npm run build:ci
        
    - name: 🔍 SSH 연결 테스트
      uses: appleboy/ssh-action@v1.1.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: 22
        timeout: 30s
        script: |
          echo "SSH 연결 테스트 성공: $(date)"
          echo "서버 정보: $(uname -a)"
          
          # SSH 안전장치: 방화벽 관련 명령어는 절대 실행하지 않음
          echo "🛡️ SSH 안전장치 활성화 - 방화벽 설정은 건드리지 않음"
          echo "✅ SSH 포트 22는 기존 상태 유지 (절대 변경 금지)"
          echo "⚠️ ufw, iptables, 방화벽 관련 명령어는 절대 실행하지 않음"
          
          echo "🔧 서버 상태 확인 완료 (SSH 보호됨)"
          
    - name: 🚀 서버 배포
      uses: appleboy/ssh-action@v1.1.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: 22
        timeout: 120s
        command_timeout: 30m
        script: |
          # 배포 디렉토리로 이동
          cd /var/www/mindgarden
          
          # 서비스 중지
          sudo systemctl stop mindgarden.service
          
          # 백업 생성
          if [ -f app.jar ]; then
            cp app.jar app.jar.backup.$(date +%Y%m%d_%H%M%S)
          fi
          
          # 프론트엔드 백업
          if [ -d frontend ]; then
            tar -czf frontend.backup.$(date +%Y%m%d_%H%M%S).tar.gz frontend/
          fi
          
    - name: 📤 백엔드 파일 업로드
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: 22
        timeout: 120s
        source: "target/consultation-management-system-1.0.0.jar"
        target: "/var/www/mindgarden/"
        strip_components: 1
        overwrite: true
        
    - name: 📤 프론트엔드 파일 업로드
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: 22
        timeout: 120s
        source: "frontend/build/*"
        target: "/var/www/html/"
        strip_components: 2
        overwrite: true
        
    - name: 📤 설정 파일 업로드
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: 22
        timeout: 120s
        source: "deployment/application-production.yml"
        target: "/var/www/mindgarden/"
        strip_components: 1
        overwrite: true
        
    # PL/SQL 프로시저 업로드는 필요할 때만 수동으로 실행
    # - name: 📤 PL/SQL 프로시저 업로드
    #   uses: appleboy/scp-action@v0.1.7
    #   with:
    #     host: ${{ secrets.PRODUCTION_HOST }}
    #     username: ${{ secrets.PRODUCTION_USER }}
    #     key: ${{ secrets.PRODUCTION_SSH_KEY }}
    #     port: 22
    #     timeout: 120s
    #     source: "sql/production_all_missing_procedures.sql"
    #     target: "/tmp/"
    #     strip_components: 1
    #     overwrite: true
        
    - name: 📤 메뉴 업데이트 SQL 업로드
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: 22
        timeout: 120s
        source: "src/main/resources/sql/update_all_role_menus.sql"
        target: "/tmp/"
        strip_components: 3
        overwrite: true
        
    - name: 📤 매핑 수정 프로시저 업로드
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: 22
        timeout: 120s
        source: "sql/mapping_update_procedures_mysql.sql"
        target: "/tmp/"
        strip_components: 1
        overwrite: true
        
    # 메시지 권한 SQL 업로드 - 권한 오류로 주석 처리
    # SQL 파일은 한 번만 실행되어야 함 - 수동 실행 필요
    # - name: 📤 메시지 권한 SQL 업로드
    #   uses: appleboy/scp-action@v0.1.7
    #   with:
    #     host: ${{ secrets.PRODUCTION_HOST }}
    #     username: ${{ secrets.PRODUCTION_USER }}
    #     key: ${{ secrets.PRODUCTION_SSH_KEY }}
    #     port: 22
    #     timeout: 120s
    #     source: "sql/add_message_management_permissions.sql"
    #     target: "/tmp/"
    #     strip_components: 1
    #     overwrite: true
        
    # 메시지 권한 강제 추가 SQL은 한 번만 실행되어야 함 - 수동 실행 필요
    # - name: 📤 메시지 권한 강제 추가 SQL 업로드
    #   uses: appleboy/scp-action@v0.1.7
    #   with:
    #     host: ${{ secrets.PRODUCTION_HOST }}
    #     username: ${{ secrets.PRODUCTION_USER }}
    #     key: ${{ secrets.PRODUCTION_SSH_KEY }}
    #     port: 22
    #     timeout: 120s
    #     source: "sql/add_message_management_permissions_force.sql"
    #     target: "/tmp/"
    #     strip_components: 1
    #     overwrite: true
        
    # SQL 파일 권한 설정은 메뉴 업데이트가 필요한 경우에만 실행
    # - name: 🔧 SQL 파일 권한 설정
    #   uses: appleboy/ssh-action@v1.1.0
    #   with:
    #     host: ${{ secrets.PRODUCTION_HOST }}
    #     username: ${{ secrets.PRODUCTION_USER }}
    #     key: ${{ secrets.PRODUCTION_SSH_KEY }}
    #     port: 22
    #     timeout: 60s
    #     script: |
    #       # SQL 파일 권한 설정
    #       sudo chmod 644 /tmp/update_all_role_menus.sql
    #       echo "✅ SQL 파일 권한 설정 완료"
        
    - name: 🔧 프론트엔드 파일 권한 설정
      uses: appleboy/ssh-action@v1.1.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: 22
        timeout: 120s
        command_timeout: 10m
        script: |
          # 프론트엔드 파일 권한 설정
          sudo chown -R www-data:www-data /var/www/html/
          sudo chmod -R 755 /var/www/html/
          
          # CSS 파일 권한 특별 설정
          sudo find /var/www/html/ -name "*.css" -exec chmod 644 {} \;
          sudo find /var/www/html/ -name "*.js" -exec chmod 644 {} \;
          
          echo "✅ 프론트엔드 파일 권한 설정 완료"
        
    # 참고: 메뉴 구조 업데이트는 필요할 때만 수동으로 실행
    # sudo mysql -u root -p'!QAZ2wsx#EDC4rfv' mindgarden < /tmp/update_all_role_menus.sql
        
    - name: 🔄 서비스 재시작
      uses: appleboy/ssh-action@v1.1.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: 22
        timeout: 60s
        command_timeout: 5m
        script: |
          cd /var/www/mindgarden
          
          # JAR 파일명 변경
          if [ -f consultation-management-system-1.0.0.jar ]; then
            mv consultation-management-system-1.0.0.jar app.jar
          fi
          
          # 권한 설정
          chmod +x app.jar
          
          # 간단한 서비스 재시작
          echo "🔄 서비스 재시작..."
          sudo systemctl stop mindgarden.service || true
          sleep 5
          sudo systemctl start mindgarden.service
          sleep 10
          
          # 서비스 상태 확인
          echo "🔍 서비스 상태 확인..."
          sudo systemctl status mindgarden.service --no-pager | head -10
          
          # 서비스 활성화 상태 확인
          if sudo systemctl is-active --quiet mindgarden.service; then
            echo "✅ 서비스 정상 시작됨"
          else
            echo "❌ 서비스 시작 실패 - 재시도..."
            sudo systemctl restart mindgarden.service
            sleep 10
          fi
          
          # 데이터베이스 스키마 업데이트는 별도 워크플로우에서 수동 실행
          echo "ℹ️ DB 스키마 업데이트는 별도 워크플로우에서 수동 실행하세요"
          echo "ℹ️ Actions > 'Fix Production Database' 워크플로우 사용"
          
          # 메시지 관리 권한 확인 (SQL 파일 업로드는 주석 처리됨)
          echo "🔧 메시지 관리 권한 확인 시작..."
          EXISTING_COUNT=$(mysql -u mindgarden -p'mindgarden2025' mind_garden -N -e "SELECT COUNT(*) FROM role_permissions WHERE permission_code IN ('MESSAGE_MANAGE', 'MESSAGE_VIEW') AND role_name='BRANCH_SUPER_ADMIN' AND is_active=true;" 2>/dev/null || echo "0")
          
          if [ "$EXISTING_COUNT" -eq "0" ]; then
            echo "⚠️ 메시지 권한이 없음 - 수동으로 SQL 실행 필요"
            echo "⚠️ 운영 서버 SSH 접속 후 SQL 실행:"
            echo "   mysql -u mindgarden -p'mindgarden2025' mind_garden < /path/to/sql/add_message_management_permissions_force.sql"
          else
            echo "✅ 메시지 관리 권한이 이미 존재함 (${EXISTING_COUNT}개)"
          fi
          
          # 매핑 수정 프로시저 배포
          echo "🔧 매핑 수정 프로시저 배포 시작..."
          if [ -f /tmp/mapping_update_procedures_mysql.sql ]; then
            echo "📋 매핑 수정 프로시저 파일 확인됨"
            mysql -h localhost -u mindgarden -p'mindgarden2025' mind_garden < /tmp/mapping_update_procedures_mysql.sql
            
            if [ $? -eq 0 ]; then
              echo "✅ 매핑 수정 프로시저 배포 완료"
              
              # 프로시저 확인
              echo "📋 배포된 프로시저 확인:"
              mysql -h localhost -u mindgarden -p'mindgarden2025' mind_garden -e "
              SELECT ROUTINE_NAME, CREATED 
              FROM information_schema.ROUTINES 
              WHERE ROUTINE_SCHEMA = 'mind_garden' 
              AND ROUTINE_TYPE = 'PROCEDURE' 
              AND ROUTINE_NAME IN ('UpdateMappingInfo', 'UpdateMappingStatistics', 'CheckMappingUpdatePermission')
              ORDER BY CREATED DESC;
              " 2>/dev/null || true
            else
              echo "⚠️ 매핑 수정 프로시저 배포 실패 (무시하고 계속 진행)"
            fi
            
            rm -f /tmp/mapping_update_procedures_mysql.sql
          else
            echo "⚠️ 매핑 수정 프로시저 파일을 찾을 수 없습니다"
          fi
          
          # PL/SQL 프로시저 등록
          echo "🔧 PL/SQL 프로시저 등록 시작..."
          if [ -f /tmp/production_all_missing_procedures.sql ]; then
            # 파일 내용 확인
            echo "📋 파일 내용 확인:"
            head -5 /tmp/production_all_missing_procedures.sql
            # 환경변수 명시적 설정
            export DB_HOST="localhost"
            export DB_USERNAME="mindgarden"
            export DB_PASSWORD="mindgarden2025"
            export DB_NAME="mind_garden"
            
            echo "📋 MySQL 연결 정보 확인..."
            echo "DB_HOST: $DB_HOST"
            echo "DB_USERNAME: $DB_USERNAME"
            echo "DB_NAME: $DB_NAME"
            
            # MySQL 연결 테스트
            mysql -h $DB_HOST -u $DB_USERNAME -p$DB_PASSWORD -e "SELECT 1;" $DB_NAME
            
            if [ $? -eq 0 ]; then
              echo "✅ MySQL 연결 성공 - 프로시저 등록 시작"
              mysql -h $DB_HOST -u $DB_USERNAME -p$DB_PASSWORD $DB_NAME < /tmp/production_all_missing_procedures.sql
              
              if [ $? -eq 0 ]; then
                echo "✅ 모든 누락된 PL/SQL 프로시저 등록 완료"
                
                # 등록된 프로시저 확인
                echo "📋 등록된 프로시저 목록:"
                mysql -h $DB_HOST -u $DB_USERNAME -p$DB_PASSWORD $DB_NAME -e "
                SELECT ROUTINE_NAME, CREATED 
                FROM information_schema.ROUTINES 
                WHERE ROUTINE_SCHEMA = DATABASE() 
                AND ROUTINE_TYPE = 'PROCEDURE' 
                ORDER BY CREATED DESC;
                "
              else
                echo "❌ PL/SQL 프로시저 등록 실패"
                exit 1
              fi
            else
              echo "❌ MySQL 연결 실패 - 프로시저 등록 건너뜀"
            fi
            
            rm -f /tmp/production_all_missing_procedures.sql
          else
            echo "⚠️ PL/SQL 프로시저 파일을 찾을 수 없습니다"
          fi
          
    - name: 🏥 헬스체크
      uses: appleboy/ssh-action@v1.1.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          echo "🏥 헬스체크 시작..."
          
          # 30초 대기 후 헬스체크
          sleep 30
          
          # 서비스 상태 확인
          if sudo systemctl is-active --quiet mindgarden.service; then
            echo "✅ 서비스 정상 실행 중"
          else
            echo "❌ 서비스 실행 실패"
            sudo systemctl status mindgarden.service --no-pager
            exit 1
          fi
          
          # HTTP 헬스체크
          if curl -f -s http://localhost:8080/actuator/health > /dev/null; then
            echo "✅ HTTP 헬스체크 통과"
          else
            echo "❌ HTTP 헬스체크 실패"
            curl -v http://localhost:8080/actuator/health || true
          fi
          
          # 프론트엔드 확인
          if curl -f -s http://localhost/login > /dev/null; then
            echo "✅ 프론트엔드 정상 접근"
          else
            echo "❌ 프론트엔드 접근 실패"
          fi
          
          echo "🎉 배포 완료!"
          
    - name: 🧹 메모리 정리
      uses: appleboy/ssh-action@v1.1.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          echo "🧹 메모리 정리 시작..."
          
          # 7일 이상 된 백업 파일 삭제
          cd /var/www/mindgarden
          find . -name "*.backup.*" -type f -mtime +7 -delete || true
          
          # 시스템 메모리 정리
          sync
          echo 3 | sudo tee /proc/sys/vm/drop_caches > /dev/null
          
          # 최종 시스템 상태
          echo "💾 메모리 사용량:"
          free -h
          echo ""
          echo "💿 디스크 사용량:"
          df -h /var/www/mindgarden
          echo ""
          echo "🔧 서비스 상태:"
          sudo systemctl is-active mindgarden.service
          
          echo "✅ 메모리 정리 완료!"