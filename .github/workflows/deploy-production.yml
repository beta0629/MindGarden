name: 🚀 MindGarden 운영 배포

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    name: 🏗️ 빌드 및 배포
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: ☕ Java 17 설정
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 📦 Node.js 18 설정
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: 🔧 Maven 캐시 설정
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: 🏗️ 백엔드 빌드
      run: mvn clean package -DskipTests
      
    - name: 📦 프론트엔드 의존성 설치
      run: |
        cd frontend
        npm ci
        
    - name: 🏗️ 프론트엔드 빌드
      run: |
        cd frontend
        npm run build:ci
        
    - name: 🔍 SSH 연결 테스트
      uses: appleboy/ssh-action@v1.1.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: 22
        timeout: 30s
        script: |
          echo "SSH 연결 테스트 성공: $(date)"
          echo "서버 정보: $(uname -a)"
          
          # SSH 포트 차단 문제 일시 해결 (한 번만)
          echo "🔧 방화벽 상태 확인..."
          sudo ufw status
          
          # ufw가 SSH를 차단하고 있다면 일시 비활성화
          if sudo ufw status | grep -q "Status: active"; then
            echo "⚠️ ufw가 활성화되어 있음 - SSH 포트 차단 문제 일시 해결"
            sudo ufw disable
            echo "✅ ufw 일시 비활성화 완료"
            
            # 배포 완료 후 다시 ufw 활성화 (SSH 포트 허용)
            echo "🔧 배포 완료 후 방화벽 재설정 준비..."
            sudo ufw --force reset
            sudo ufw default deny incoming
            sudo ufw default allow outgoing
            sudo ufw allow 22/tcp    # SSH
            sudo ufw allow 80/tcp    # HTTP
            sudo ufw allow 443/tcp   # HTTPS
            sudo ufw allow 3306/tcp  # MySQL
            sudo ufw --force enable
            sudo systemctl enable ufw
            echo "✅ ufw 재활성화 완료 (SSH 포트 허용)"
          else
            echo "✅ ufw가 이미 비활성화되어 있음"
          fi
          
    - name: 🚀 서버 배포
      uses: appleboy/ssh-action@v1.1.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: 22
        timeout: 120s
        command_timeout: 30m
        script: |
          # 배포 디렉토리로 이동
          cd /var/www/mindgarden
          
          # 서비스 중지
          sudo systemctl stop mindgarden.service
          
          # 백업 생성
          if [ -f app.jar ]; then
            cp app.jar app.jar.backup.$(date +%Y%m%d_%H%M%S)
          fi
          
          # 프론트엔드 백업
          if [ -d frontend ]; then
            tar -czf frontend.backup.$(date +%Y%m%d_%H%M%S).tar.gz frontend/
          fi
          
    - name: 📤 백엔드 파일 업로드
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: 22
        timeout: 120s
        source: "target/consultation-management-system-1.0.0.jar"
        target: "/var/www/mindgarden/"
        strip_components: 1
        overwrite: true
        
    - name: 📤 프론트엔드 파일 업로드
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: 22
        timeout: 120s
        source: "frontend/build/*"
        target: "/var/www/html/"
        strip_components: 2
        overwrite: true
        
    - name: 📤 설정 파일 업로드
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: 22
        timeout: 120s
        source: "deployment/application-production.yml"
        target: "/var/www/mindgarden/application-prod.yml"
        overwrite: true
        
    - name: 🔧 프론트엔드 파일 권한 설정
      uses: appleboy/ssh-action@v1.1.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: 22
        timeout: 120s
        command_timeout: 10m
        script: |
          # 프론트엔드 파일 권한 설정
          sudo chown -R www-data:www-data /var/www/html/
          sudo chmod -R 755 /var/www/html/
          
          # CSS 파일 권한 특별 설정
          sudo find /var/www/html/ -name "*.css" -exec chmod 644 {} \;
          sudo find /var/www/html/ -name "*.js" -exec chmod 644 {} \;
          
          echo "✅ 프론트엔드 파일 권한 설정 완료"
        
    - name: 🔄 서비스 재시작
      uses: appleboy/ssh-action@v1.1.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: 22
        timeout: 60s
        command_timeout: 5m
        script: |
          cd /var/www/mindgarden
          
          # JAR 파일명 변경
          if [ -f consultation-management-system-1.0.0.jar ]; then
            mv consultation-management-system-1.0.0.jar app.jar
          fi
          
          # 권한 설정
          chmod +x app.jar
          
          # 간단한 서비스 재시작
          echo "🔄 서비스 재시작..."
          sudo systemctl stop mindgarden.service || true
          sleep 5
          sudo systemctl start mindgarden.service
          sleep 10
          
          # 서비스 상태 확인
          echo "🔍 서비스 상태 확인..."
          sudo systemctl status mindgarden.service --no-pager | head -10
          
          # 서비스 활성화 상태 확인
          if sudo systemctl is-active --quiet mindgarden.service; then
            echo "✅ 서비스 정상 시작됨"
          else
            echo "❌ 서비스 시작 실패 - 재시도..."
            sudo systemctl restart mindgarden.service
            sleep 10
          fi
          
    - name: 🏥 헬스체크
      uses: appleboy/ssh-action@v1.1.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          echo "🏥 헬스체크 시작..."
          
          # 30초 대기 후 헬스체크
          sleep 30
          
          # 서비스 상태 확인
          if sudo systemctl is-active --quiet mindgarden.service; then
            echo "✅ 서비스 정상 실행 중"
          else
            echo "❌ 서비스 실행 실패"
            sudo systemctl status mindgarden.service --no-pager
            exit 1
          fi
          
          # HTTP 헬스체크
          if curl -f -s http://localhost:8080/actuator/health > /dev/null; then
            echo "✅ HTTP 헬스체크 통과"
          else
            echo "❌ HTTP 헬스체크 실패"
            curl -v http://localhost:8080/actuator/health || true
          fi
          
          # 프론트엔드 확인
          if curl -f -s http://localhost/login > /dev/null; then
            echo "✅ 프론트엔드 정상 접근"
          else
            echo "❌ 프론트엔드 접근 실패"
          fi
          
          echo "🎉 배포 완료!"
          
    - name: 🧹 메모리 정리
      uses: appleboy/ssh-action@v1.1.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          echo "🧹 메모리 정리 시작..."
          
          # 7일 이상 된 백업 파일 삭제
          cd /var/www/mindgarden
          find . -name "*.backup.*" -type f -mtime +7 -delete || true
          
          # 시스템 메모리 정리
          sync
          echo 3 | sudo tee /proc/sys/vm/drop_caches > /dev/null
          
          # 최종 시스템 상태
          echo "💾 메모리 사용량:"
          free -h
          echo ""
          echo "💿 디스크 사용량:"
          df -h /var/www/mindgarden
          echo ""
          echo "🔧 서비스 상태:"
          sudo systemctl is-active mindgarden.service
          
          echo "✅ 메모리 정리 완료!"