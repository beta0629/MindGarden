import React, { useState, useEffect } from 'react';
import ReactDOM from 'react-dom';
import { Calendar, XCircle, AlertCircle } from 'lucide-react';
import UnifiedLoading from '../common/UnifiedLoading';
import notificationManager from '../../utils/notification';
import { apiGet } from '../../utils/ajax';
import { API_BASE_URL } from '../../constants/api';
import csrfTokenManager from '../../utils/csrfTokenManager';

/**
 * ÏÉÅÎã¥ÏÇ¨Ïö© Ìú¥Í∞Ä Îì±Î°ù Î™®Îã¨
 * - ÏûêÏã†Ïùò Ìú¥Í∞ÄÎßå Îì±Î°ù Í∞ÄÎä•
 * - Í¥ÄÎ¶¨ÏûêÏö© VacationManagementModalÍ≥º Î≥ÑÎèÑ
 * 
 * @author MindGarden
 * @version 1.0.0
 * @since 2025-10-27
 */
const ConsultantVacationModal = ({ 
    isOpen, 
    onClose, 
    selectedDate,
    consultantId,
    onVacationUpdated 
}) => {
    const [vacationData, setVacationData] = useState({
        date: selectedDate ? selectedDate.toISOString().split('T')[0] : '',
        type: 'MORNING_HALF_DAY',
        reason: ''
    });
    const [loading, setLoading] = useState(false);
    const [vacationTypeOptions, setVacationTypeOptions] = useState([]);

    // selectedDateÍ∞Ä Î≥ÄÍ≤ΩÎê† Îïå vacationDataÏùò ÎÇ†Ïßú ÏóÖÎç∞Ïù¥Ìä∏
    useEffect(() => {
        if (selectedDate) {
            setVacationData(prev => ({
                ...prev,
                date: selectedDate.toISOString().split('T')[0]
            }));
        }
    }, [selectedDate]);

    // Ìú¥Í∞Ä Ïú†Ìòï ÏΩîÎìú Î°úÎìú
    useEffect(() => {
        const loadVacationTypeCodes = async () => {
            try {
                const response = await apiGet('/api/common-codes/VACATION_TYPE');
                if (response && response.length > 0) {
                    const allowedTypes = [
                        'MORNING_HALF_DAY',
                        'AFTERNOON_HALF_DAY',
                        'MORNING_HALF_1',
                        'MORNING_HALF_2',
                        'AFTERNOON_HALF_1',
                        'AFTERNOON_HALF_2',
                        'ALL_DAY'
                    ];
                    
                    const uniqueCodes = response.filter(code => 
                        allowedTypes.includes(code.codeValue)
                    );
                    
                    const sortedCodes = uniqueCodes.sort((a, b) => {
                        const order = allowedTypes.indexOf(a.codeValue) - allowedTypes.indexOf(b.codeValue);
                        return order;
                    });
                    
                    const options = sortedCodes.map(code => ({
                        value: code.codeValue,
                        label: code.codeLabel,
                        description: code.description
                    }));
                    setVacationTypeOptions(options);
                }
            } catch (error) {
                console.error('Ìú¥Í∞Ä Ïú†Ìòï ÏΩîÎìú Î°úÎìú Ïã§Ìå®:', error);
                setVacationTypeOptions([]);
            }
        };
        loadVacationTypeCodes();
    }, []);

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setVacationData(prev => ({
            ...prev,
            [name]: value
        }));
    };

    const handleSubmit = async () => {
        if (!vacationData.reason.trim()) {
            notificationManager.error('Ìú¥Í∞Ä ÏÇ¨Ïú†Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
            return;
        }

        setLoading(true);
        try {
            const requestData = {
                consultantId: consultantId,
                date: vacationData.date,
                type: vacationData.type,
                reason: vacationData.reason
            };

            console.log('üèñÔ∏è Ìú¥Í∞Ä Îì±Î°ù ÏöîÏ≤≠:', requestData);

            const response = await csrfTokenManager.post('/api/consultant/vacation', requestData);

            if (response.ok) {
                const result = await response.json();
                console.log('‚úÖ Ìú¥Í∞Ä Îì±Î°ù ÏÑ±Í≥µ:', result);
                notificationManager.success('Ìú¥Í∞ÄÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Îì±Î°ùÎêòÏóàÏäµÎãàÎã§.');
                onVacationUpdated?.();
                onClose();
            } else {
                const error = await response.json();
                console.error('‚ùå Ìú¥Í∞Ä Îì±Î°ù Ïã§Ìå®:', error);
                notificationManager.error(error.message || 'Ìú¥Í∞Ä Îì±Î°ùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
            }
        } catch (error) {
            console.error('Ìú¥Í∞Ä Îì±Î°ù Ïò§Î•ò:', error);
            notificationManager.error('Ìú¥Í∞Ä Îì±Î°ù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
        } finally {
            setLoading(false);
        }
    };

    const formatDate = (date) => {
        if (!date) return '';
        const dateObj = date instanceof Date ? date : new Date(date);
        return dateObj.toLocaleDateString('ko-KR', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            weekday: 'long'
        });
    };

    if (!isOpen) return null;

    const portalTarget = document.body || document.createElement('div');

    return ReactDOM.createPortal(
        <div className="mg-v2-modal-overlay" onClick={onClose}>
            <div className="mg-v2-modal mg-v2-modal-medium" onClick={(e) => e.stopPropagation()}>
                {/* Ìó§Îçî */}
                <div className="mg-v2-modal-header">
                    <div className="mg-v2-modal-title-wrapper">
                        <Calendar size={28} className="mg-v2-modal-title-icon" />
                        <div>
                            <h2 className="mg-v2-modal-title">Ìú¥Í∞Ä Îì±Î°ù</h2>
                            {selectedDate && (
                                <p className="mg-v2-modal-subtitle">{formatDate(selectedDate)}</p>
                            )}
                        </div>
                    </div>
                    <button 
                        className="mg-v2-modal-close" 
                        onClick={onClose}
                        disabled={loading}
                        aria-label="Îã´Í∏∞"
                    >
                        <XCircle size={24} />
                    </button>
                </div>

                {/* Î≥∏Î¨∏ */}
                <div className="mg-v2-modal-body">
                    <div className="mg-v2-form-group">
                        <label className="mg-v2-form-label">
                            Ìú¥Í∞Ä Ïú†Ìòï <span className="mg-v2-form-label-required">*</span>
                        </label>
                        <select
                            className="mg-v2-form-select"
                            name="type"
                            value={vacationData.type}
                            onChange={handleInputChange}
                            disabled={loading}
                        >
                            {vacationTypeOptions.map(option => (
                                <option key={option.value} value={option.value}>
                                    {option.label}
                                </option>
                            ))}
                        </select>
                    </div>

                    <div className="mg-v2-form-group">
                        <label className="mg-v2-form-label">
                            Ìú¥Í∞Ä ÏÇ¨Ïú† <span className="mg-v2-form-label-required">*</span>
                        </label>
                        <textarea
                            className="mg-v2-form-textarea"
                            name="reason"
                            value={vacationData.reason}
                            onChange={handleInputChange}
                            placeholder="Ìú¥Í∞Ä ÏÇ¨Ïú†Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî"
                            rows="4"
                            disabled={loading}
                            required
                        />
                    </div>
                </div>

                {/* Ìë∏ÌÑ∞ */}
                <div className="mg-v2-modal-footer">
                    <button 
                        className="mg-v2-btn mg-v2-btn--secondary" 
                        onClick={onClose}
                        disabled={loading}
                    >
                        Ï∑®ÏÜå
                    </button>
                    <button 
                        className="mg-v2-btn mg-v2-btn--primary" 
                        onClick={handleSubmit}
                        disabled={loading}
                    >
                        {loading ? 'Îì±Î°ù Ï§ë...' : 'Ìú¥Í∞Ä Îì±Î°ù'}
                    </button>
                </div>
            </div>
        </div>,
        portalTarget
    );
};

export default ConsultantVacationModal;
