import React, { useState, useEffect, useCallback } from 'react';
import { Button, Modal, Form, Badge, Container, Row, Col, Card } from 'react-bootstrap';
import { FaUsers, FaEdit } from 'react-icons/fa';
import { apiGet } from '../../utils/ajax';
import { showNotification } from '../../utils/notification';
import LoadingSpinner from '../common/LoadingSpinner';

const UserManagement = ({ onUpdate, showToast }) => {
    // showToastÍ∞Ä ÏóÜÏúºÎ©¥ Í∏∞Î≥∏ notification ÏÇ¨Ïö©
    const toast = showToast || showNotification;
    const [users, setUsers] = useState([]);
    const [roles, setRoles] = useState([]);
    const [roleOptions, setRoleOptions] = useState([]);
    const [loadingCodes, setLoadingCodes] = useState(false);
    const [showRoleModal, setShowRoleModal] = useState(false);
    const [selectedUser, setSelectedUser] = useState(null);
    const [loading, setLoading] = useState(false);
    const [form, setForm] = useState({
        newRole: ''
    });

    // Ïó≠Ìï† ÏΩîÎìú Î°úÎìú
    const loadRoleCodes = useCallback(async () => {
        try {
            setLoadingCodes(true);
            const response = await apiGet('/api/admin/common-codes/values?groupCode=ROLE');
            if (response && response.length > 0) {
                const options = response.map(code => ({
                    value: code.codeValue,
                    label: code.codeLabel,
                    icon: code.icon,
                    color: code.colorCode,
                    description: code.description
                }));
                setRoleOptions(options);
            }
        } catch (error) {
            console.error('Ïó≠Ìï† ÏΩîÎìú Î°úÎìú Ïã§Ìå®:', error);
            // Ïã§Ìå® Ïãú Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï
            setRoleOptions([
                { value: 'CLIENT', label: 'ÎÇ¥Îã¥Ïûê', icon: 'üë§', color: '#3b82f6', description: 'ÏÉÅÎã¥ÏùÑ Î∞õÎäî ÎÇ¥Îã¥Ïûê' },
                { value: 'CONSULTANT', label: 'ÏÉÅÎã¥ÏÇ¨', icon: 'üë®‚Äç‚öïÔ∏è', color: '#10b981', description: 'ÏÉÅÎã¥ÏùÑ Ï†úÍ≥µÌïòÎäî ÏÉÅÎã¥ÏÇ¨' },
                { value: 'ADMIN', label: 'Í¥ÄÎ¶¨Ïûê', icon: 'üë®‚Äçüíº', color: '#f59e0b', description: 'ÏãúÏä§ÌÖú Í¥ÄÎ¶¨Ïûê' },
                { value: 'BRANCH_SUPER_ADMIN', label: 'ÏàòÌçºÍ¥ÄÎ¶¨Ïûê', icon: 'üëë', color: '#ef4444', description: 'ÏµúÍ≥† Í¥ÄÎ¶¨Ïûê' }
            ]);
        } finally {
            setLoadingCodes(false);
        }
    }, []);

    const loadData = useCallback(async () => {
        setLoading(true);
        try {
            const [usersRes, rolesRes] = await Promise.all([
                fetch('/api/admin/users'),
                fetch('/api/admin/users/roles')
            ]);

            if (usersRes.ok) {
                const data = await usersRes.json();
                setUsers(data.data || []);
            }

            if (rolesRes.ok) {
                const data = await rolesRes.json();
                setRoles(data || []);
            }
        } catch (error) {
            console.error('Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
        } finally {
            setLoading(false);
        }
    }, []);

    useEffect(() => {
        loadData();
        loadRoleCodes();
    }, [loadData, loadRoleCodes]);

    const handleRoleChange = async (e) => {
        e.preventDefault();
        
        // ÎÇ¥Îã¥Ïûê‚ÜíÏÉÅÎã¥ÏÇ¨ Î≥ÄÍ≤Ω Ïãú ÌôïÏù∏ Î©îÏãúÏßÄ
        if (selectedUser.role === 'CLIENT' && form.newRole === 'CONSULTANT') {
            const confirmed = window.confirm(
                `${selectedUser.name}ÎãòÏùÑ ÏÉÅÎã¥ÏÇ¨Î°ú Î≥ÄÍ≤ΩÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n\n` +
                'Ïù¥ Î≥ÄÍ≤ΩÏúºÎ°ú Ïù∏Ìï¥:\n' +
                '‚Ä¢ ÏÉÅÎã¥ÏÇ¨ Î©îÎâ¥ÏôÄ Í∏∞Îä•Ïóê Ï†ëÍ∑º Í∞ÄÎä•\n' +
                '‚Ä¢ ÎÇ¥Îã¥Ïûê Í¥ÄÎ¶¨, Ïä§ÏºÄÏ§Ñ Í¥ÄÎ¶¨ Í∂åÌïú Î∂ÄÏó¨\n' +
                '‚Ä¢ ÌïÑÏöîÏãú Îã§Ïãú ÎÇ¥Îã¥ÏûêÎ°ú ÎêòÎèåÎ¶¥ Ïàò ÏûàÏùå'
            );
            if (!confirmed) return;
        }
        
        try {
            const response = await fetch(`/api/admin/users/${selectedUser.id}/role?newRole=${form.newRole}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                credentials: 'include'
            });

            if (response.ok) {
                const message = selectedUser.role === 'CLIENT' && form.newRole === 'CONSULTANT' 
                    ? `${selectedUser.name}ÎãòÏù¥ ÏÉÅÎã¥ÏÇ¨Î°ú ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§.`
                    : 'ÏÇ¨Ïö©Ïûê Ïó≠Ìï†Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§.';
                toast(message, 'success');
                setShowRoleModal(false);
                setForm({ newRole: '' });
                loadData();
                onUpdate();
            } else {
                const error = await response.json();
                toast(error.message || 'Ïó≠Ìï† Î≥ÄÍ≤ΩÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'danger');
            }
        } catch (error) {
            console.error('Ïó≠Ìï† Î≥ÄÍ≤Ω Ïã§Ìå®:', error);
            toast('Ïó≠Ìï† Î≥ÄÍ≤ΩÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'danger');
        }
    };

    const getRoleBadgeVariant = (role) => {
        switch (role) {
            case 'CLIENT': return 'primary';
            case 'CONSULTANT': return 'success';
            case 'ADMIN': return 'warning';
            case 'BRANCH_SUPER_ADMIN': return 'danger';
            default: return 'secondary';
        }
    };

    const getRoleDisplayName = (role) => {
        switch (role) {
            case 'CLIENT': return 'ÎÇ¥Îã¥Ïûê';
            case 'CONSULTANT': return 'ÏÉÅÎã¥ÏÇ¨';
            case 'ADMIN': return 'Í¥ÄÎ¶¨Ïûê';
            case 'BRANCH_SUPER_ADMIN': return 'ÏµúÍ≥†Í¥ÄÎ¶¨Ïûê';
            default: return role;
        }
    };

    return (
        <Container fluid className="py-4">
            <Row>
                <Col>
                    <Card>
                        <Card.Header>
                            <h5 className="mb-0">
                                <i className="bi bi-people-fill me-2"></i>
                                ÏÇ¨Ïö©Ïûê Í¥ÄÎ¶¨
                            </h5>
                        </Card.Header>
                        <Card.Body>
                {loading ? (
                    <LoadingSpinner text="ÏÇ¨Ïö©Ïûê Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë..." size="medium" />
                ) : users.length === 0 ? (
                    <div className="text-center py-4 text-muted">
                        <FaUsers className="mb-3" style={{ fontSize: '2rem' }} />
                        <p>Îì±Î°ùÎêú ÏÇ¨Ïö©ÏûêÍ∞Ä ÏóÜÏäµÎãàÎã§.</p>
                    </div>
                ) : (
                    <div className="user-list">
                        {users.slice(0, 5).map((user) => (
                            <div key={user.id} className="summary-item">
                                <div className="summary-icon">
                                    <FaUsers />
                                </div>
                                <div className="summary-info">
                                    <div className="summary-label">{user.name}</div>
                                    <div className="summary-value">
                                        {user.email} | 
                                        <Badge bg={getRoleBadgeVariant(user.role)} className="ms-2">
                                            {getRoleDisplayName(user.role)}
                                        </Badge>
                                    </div>
                                </div>
                                <div className="d-flex gap-1">
                                    {/* ÎÇ¥Îã¥Ïûê‚ÜíÏÉÅÎã¥ÏÇ¨ Îπ†Î•∏ Î≥ÄÍ≤Ω Î≤ÑÌäº */}
                                    {user.role === 'CLIENT' && (
                                        <Button 
                                            size="sm" 
                                            variant="success"
                                            onClick={() => {
                                                setSelectedUser(user);
                                                setForm({ newRole: 'CONSULTANT' });
                                                setShowRoleModal(true);
                                            }}
                                            title="ÎÇ¥Îã¥ÏûêÎ•º ÏÉÅÎã¥ÏÇ¨Î°ú Î≥ÄÍ≤Ω"
                                        >
                                            <i className="bi bi-person-plus"></i>
                                        </Button>
                                    )}
                                    
                                    {/* ÏùºÎ∞ò Ïó≠Ìï† Î≥ÄÍ≤Ω Î≤ÑÌäº */}
                                    <Button 
                                        size="sm" 
                                        variant="outline-primary"
                                        onClick={() => {
                                            setSelectedUser(user);
                                            setForm({ newRole: user.role });
                                            setShowRoleModal(true);
                                        }}
                                        title="Ïó≠Ìï† Î≥ÄÍ≤Ω"
                                    >
                                        <FaEdit />
                                    </Button>
                                </div>
                            </div>
                        ))}
                        {users.length > 5 && (
                            <div className="text-center mt-2">
                                <small className="text-muted">
                                    Ïô∏ {users.length - 5}Î™Ö Îçî...
                                </small>
                            </div>
                        )}
                    </div>
                )}
                        </Card.Body>
                    </Card>
                </Col>
            </Row>

            {/* Ïó≠Ìï† Î≥ÄÍ≤Ω Î™®Îã¨ */}
            <Modal show={showRoleModal} onHide={() => setShowRoleModal(false)} size="lg">
                <Modal.Header closeButton>
                    <Modal.Title>
                        <i className="bi bi-person-gear me-2"></i>
                        ÏÇ¨Ïö©Ïûê Ïó≠Ìï† Î≥ÄÍ≤Ω
                    </Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    {selectedUser && (
                        <Form onSubmit={handleRoleChange}>
                            <div className="mb-3">
                                <strong>ÏÇ¨Ïö©Ïûê:</strong> {selectedUser.name} ({selectedUser.email})
                            </div>
                            <div className="mb-3">
                                <strong>ÌòÑÏû¨ Ïó≠Ìï†:</strong> 
                                <Badge bg={getRoleBadgeVariant(selectedUser.role)} className="ms-2">
                                    {getRoleDisplayName(selectedUser.role)}
                                </Badge>
                            </div>
                            
                            {/* ÎÇ¥Îã¥Ïûê‚ÜíÏÉÅÎã¥ÏÇ¨ Î≥ÄÍ≤Ω Ïãú ÌäπÎ≥Ñ ÏïàÎÇ¥ */}
                            {selectedUser.role === 'CLIENT' && form.newRole === 'CONSULTANT' && (
                                <div className="alert alert-info mb-3">
                                    <h6><i className="bi bi-info-circle me-2"></i>ÏÉÅÎã¥ÏÇ¨ Ïó≠Ìï† Î≥ÄÍ≤Ω ÏïàÎÇ¥</h6>
                                    <ul className="mb-0">
                                        <li>ÏÇ¨Ïö©ÏûêÍ∞Ä ÏÉÅÎã¥ÏÇ¨ Ïó≠Ìï†Î°ú Î≥ÄÍ≤ΩÎê©ÎãàÎã§.</li>
                                        <li>ÏÉÅÎã¥ÏÇ¨ Î©îÎâ¥ÏôÄ Í∏∞Îä•Ïóê Ï†ëÍ∑ºÌï† Ïàò ÏûàÍ≤å Îê©ÎãàÎã§.</li>
                                        <li>ÎÇ¥Îã¥Ïûê Í¥ÄÎ¶¨, Ïä§ÏºÄÏ§Ñ Í¥ÄÎ¶¨ Îì±Ïùò Í∂åÌïúÏù¥ Î∂ÄÏó¨Îê©ÎãàÎã§.</li>
                                        <li>Î≥ÄÍ≤Ω ÌõÑÏóêÎäî Îã§Ïãú ÎÇ¥Îã¥ÏûêÎ°ú ÎêòÎèåÎ¶¥ Ïàò ÏûàÏäµÎãàÎã§.</li>
                                    </ul>
                                </div>
                            )}
                            
                            <Form.Group className="mb-3">
                                <Form.Label>ÏÉàÎ°úÏö¥ Ïó≠Ìï†</Form.Label>
                                <Form.Select
                                    value={form.newRole}
                                    onChange={(e) => setForm({...form, newRole: e.target.value})}
                                    required
                                >
                                    <option value="">Ïó≠Ìï†ÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</option>
                                    {roleOptions.map(role => (
                                        <option key={role.value} value={role.value}>
                                            {role.icon} {role.label} ({role.value})
                                        </option>
                                    ))}
                                </Form.Select>
                            </Form.Group>
                            
                            <div className="d-flex justify-content-end gap-2">
                                <Button variant="secondary" onClick={() => setShowRoleModal(false)}>
                                    Ï∑®ÏÜå
                                </Button>
                                <Button 
                                    variant="primary" 
                                    type="submit"
                                    disabled={form.newRole === selectedUser.role}
                                >
                                    <i className="bi bi-check-lg me-2"></i>
                                    {selectedUser.role === 'CLIENT' && form.newRole === 'CONSULTANT' 
                                        ? 'ÏÉÅÎã¥ÏÇ¨Î°ú Î≥ÄÍ≤Ω' 
                                        : 'Ïó≠Ìï† Î≥ÄÍ≤Ω'}
                                </Button>
                            </div>
                        </Form>
                    )}
                </Modal.Body>
            </Modal>
        </Container>
    );
};

export default UserManagement;
