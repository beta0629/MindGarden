import React, { useState, useEffect } from 'react';
import UnifiedLoading from '../common/UnifiedLoading';
import { apiGet, apiPost, apiPut } from '../../utils/ajax';
import notificationManager from '../../utils/notification';
import './SpecialtyManagementModal.css';

/**
 * ÏÉÅÎã¥ÏÇ¨ Ï†ÑÎ¨∏Î∂ÑÏïº Í¥ÄÎ¶¨ Î™®Îã¨ Ïª¥Ìè¨ÎÑåÌä∏
 * - ÏÉÅÎã¥ÏÇ¨Î≥Ñ Ï†ÑÎ¨∏Î∂ÑÏïº ÏÑ§Ï†ï
 * - Ï†ÑÎ¨∏Î∂ÑÏïºÎ≥Ñ ÌïÑÌÑ∞ÎßÅ
 * - Ï†ÑÎ¨∏Î∂ÑÏïº ÌÜµÍ≥Ñ
 * 
 * @author MindGarden
 * @version 1.0.0
 * @since 2025-09-30
 */
const SpecialtyManagementModal = ({ isOpen, onClose }) => {
    const [loading, setLoading] = useState(false);
    const [consultants, setConsultants] = useState([]);
    const [specialties, setSpecialties] = useState([]);
    const [selectedConsultant, setSelectedConsultant] = useState(null);
    const [newSpecialty, setNewSpecialty] = useState('');
    const [filterSpecialty, setFilterSpecialty] = useState('');
    const [statistics, setStatistics] = useState(null);

    useEffect(() => {
        if (isOpen) {
            loadConsultants();
            loadSpecialties();
            loadStatistics();
        }
    }, [isOpen]);

    /**
     * ÏÉÅÎã¥ÏÇ¨ Î™©Î°ù Î°úÎìú
     */
    const loadConsultants = async () => {
        try {
            setLoading(true);
            const response = await apiGet('/api/admin/consultants');
            if (response && response.success !== false) {
                setConsultants(response.data || []);
            }
        } catch (error) {
            console.error('ÏÉÅÎã¥ÏÇ¨ Î™©Î°ù Î°úÎìú Ïã§Ìå®:', error);
            notificationManager.error('ÏÉÅÎã¥ÏÇ¨ Î™©Î°ùÏùÑ Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.');
        } finally {
            setLoading(false);
        }
    };

    /**
     * Ï†ÑÎ¨∏Î∂ÑÏïº Î™©Î°ù Î°úÎìú
     */
    const loadSpecialties = async () => {
        try {
            const response = await apiGet('/api/common-codes/SPECIALTY');
            if (response && Array.isArray(response)) {
                setSpecialties(response);
            } else if (response && response.success !== false) {
                setSpecialties(response.data || []);
            }
        } catch (error) {
            console.error('Ï†ÑÎ¨∏Î∂ÑÏïº Î™©Î°ù Î°úÎìú Ïã§Ìå®:', error);
        }
    };

    /**
     * Ï†ÑÎ¨∏Î∂ÑÏïº ÌÜµÍ≥Ñ Î°úÎìú
     */
    const loadStatistics = async () => {
        try {
            const response = await apiGet('/api/admin/statistics/specialty');
            if (response && response.success !== false) {
                setStatistics(response.data);
            }
        } catch (error) {
            console.error('Ï†ÑÎ¨∏Î∂ÑÏïº ÌÜµÍ≥Ñ Î°úÎìú Ïã§Ìå®:', error);
        }
    };

    /**
     * ÏÉÅÎã¥ÏÇ¨ ÏÑ†ÌÉù
     */
    const handleConsultantSelect = (consultant) => {
        setSelectedConsultant(consultant);
        setNewSpecialty(consultant.specialty || '');
    };

    /**
     * Ï†ÑÎ¨∏Î∂ÑÏïº Ï∂îÍ∞Ä/ÏàòÏ†ï
     */
    const handleSaveSpecialty = async () => {
        if (!selectedConsultant || !newSpecialty.trim()) {
            notificationManager.error('Ï†ÑÎ¨∏Î∂ÑÏïºÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
            return;
        }

        try {
            setLoading(true);
            
            const response = await apiPut(`/api/admin/consultants/${selectedConsultant.id}/specialty`, {
                specialty: newSpecialty.trim()
            });
            
            if (response && response.success !== false) {
                notificationManager.success('Ï†ÑÎ¨∏Î∂ÑÏïºÍ∞Ä Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.');
                
                // ÏÉÅÎã¥ÏÇ¨ Î™©Î°ù ÏóÖÎç∞Ïù¥Ìä∏
                setConsultants(prev => 
                    prev.map(consultant => 
                        consultant.id === selectedConsultant.id 
                            ? { ...consultant, specialty: newSpecialty.trim() }
                            : consultant
                    )
                );
                
                // ÌÜµÍ≥Ñ ÏÉàÎ°úÍ≥†Ïπ®
                loadStatistics();
            } else {
                throw new Error(response?.message || 'Ï†ÑÎ¨∏Î∂ÑÏïº Ï†ÄÏû•Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
            }

        } catch (error) {
            console.error('‚ùå Ï†ÑÎ¨∏Î∂ÑÏïº Ï†ÄÏû• Ïã§Ìå®:', error);
            notificationManager.error(error.message || 'Ï†ÑÎ¨∏Î∂ÑÏïº Ï†ÄÏû• Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
        } finally {
            setLoading(false);
        }
    };

    /**
     * Ï†ÑÎ¨∏Î∂ÑÏïº Ï∂îÍ∞Ä (Í≥µÌÜµ ÏΩîÎìú)
     */
    const handleAddSpecialty = async () => {
        if (!newSpecialty.trim()) {
            notificationManager.error('Ï†ÑÎ¨∏Î∂ÑÏïºÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
            return;
        }

        try {
            setLoading(true);
            
            const response = await apiPost('/api/common-codes', {
                codeGroup: 'CONSULTANT_SPECIALTY',
                codeValue: newSpecialty.trim().toUpperCase().replace(/\s+/g, '_'),
                codeLabel: newSpecialty.trim(),
                codeDescription: `ÏÉÅÎã¥ÏÇ¨ Ï†ÑÎ¨∏Î∂ÑÏïº: ${newSpecialty.trim()}`,
                isActive: true,
                sortOrder: 0
            });
            
            if (response && response.success !== false) {
                notificationManager.success('ÏÉà Ï†ÑÎ¨∏Î∂ÑÏïºÍ∞Ä Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§.');
                loadSpecialties();
                setNewSpecialty('');
            } else {
                throw new Error(response?.message || 'Ï†ÑÎ¨∏Î∂ÑÏïº Ï∂îÍ∞ÄÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
            }

        } catch (error) {
            console.error('‚ùå Ï†ÑÎ¨∏Î∂ÑÏïº Ï∂îÍ∞Ä Ïã§Ìå®:', error);
            notificationManager.error(error.message || 'Ï†ÑÎ¨∏Î∂ÑÏïº Ï∂îÍ∞Ä Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
        } finally {
            setLoading(false);
        }
    };

    /**
     * ÌïÑÌÑ∞ÎßÅÎêú ÏÉÅÎã¥ÏÇ¨ Î™©Î°ù
     */
    const filteredConsultants = consultants.filter(consultant => {
        if (!filterSpecialty) return true;
        return consultant.specialty && consultant.specialty.includes(filterSpecialty);
    });

    /**
     * Î™®Îã¨ Îã´Í∏∞
     */
    const handleClose = () => {
        if (loading) return;
        setSelectedConsultant(null);
        setNewSpecialty('');
        setFilterSpecialty('');
        onClose();
    };

    if (!isOpen) return null;

    return (
        <div className="specialty-management-modal-overlay">
            <div className="specialty-management-modal">
                <div className="specialty-management-modal-header">
                    <h3>üéØ ÏÉÅÎã¥ÏÇ¨ Ï†ÑÎ¨∏Î∂ÑÏïº Í¥ÄÎ¶¨</h3>
                    <button 
                        className="specialty-management-close-btn"
                        onClick={handleClose}
                        disabled={loading}
                    >
                        ‚úï
                    </button>
                </div>

                <div className="specialty-management-modal-content">
                    {/* ÌÜµÍ≥Ñ Ï†ïÎ≥¥ */}
                    {statistics && (
                        <div className="specialty-statistics">
                            <h4>Ï†ÑÎ¨∏Î∂ÑÏïº ÌÜµÍ≥Ñ</h4>
                            <div className="stats-grid">
                                <div className="stat-item">
                                    <span className="stat-label">Ï¥ù ÏÉÅÎã¥ÏÇ¨</span>
                                    <span className="stat-value">{statistics.totalConsultants || 0}Î™Ö</span>
                                </div>
                                <div className="stat-item">
                                    <span className="stat-label">Ï†ÑÎ¨∏Î∂ÑÏïº ÏÑ§Ï†ï</span>
                                    <span className="stat-value">{statistics.specialtySet || 0}Î™Ö</span>
                                </div>
                                <div className="stat-item">
                                    <span className="stat-label">Ï†ÑÎ¨∏Î∂ÑÏïº Ï¢ÖÎ•ò</span>
                                    <span className="stat-value">{statistics.specialtyTypes || 0}Í∞ú</span>
                                </div>
                            </div>
                        </div>
                    )}

                    <div className="specialty-content">
                        {/* ÏÉÅÎã¥ÏÇ¨ Î™©Î°ù */}
                        <div className="consultants-section">
                            <div className="section-header">
                                <h4>ÏÉÅÎã¥ÏÇ¨ Î™©Î°ù</h4>
                                <div className="filter-controls">
                                    <select
                                        value={filterSpecialty}
                                        onChange={(e) => setFilterSpecialty(e.target.value)}
                                        disabled={loading}
                                    >
                                        <option value="">Ï†ÑÏ≤¥ Ï†ÑÎ¨∏Î∂ÑÏïº</option>
                                        {specialties.map(specialty => (
                                            <option key={specialty.codeValue} value={specialty.codeLabel}>
                                                {specialty.codeLabel}
                                            </option>
                                        ))}
                                    </select>
                                </div>
                            </div>

                            <div className="consultants-list">
                                {filteredConsultants.map(consultant => (
                                    <div 
                                        key={consultant.id} 
                                        className={`consultant-item ${selectedConsultant?.id === consultant.id ? 'selected' : ''}`}
                                        onClick={() => handleConsultantSelect(consultant)}
                                    >
                                        <div className="consultant-info">
                                            <div className="consultant-name">{consultant.name || consultant.username}</div>
                                            <div className="consultant-specialty">
                                                {consultant.specialty || 'Ï†ÑÎ¨∏Î∂ÑÏïº ÎØ∏ÏÑ§Ï†ï'}
                                            </div>
                                        </div>
                                        <div className="consultant-actions">
                                            <button 
                                                className="btn-edit"
                                                onClick={(e) => {
                                                    e.stopPropagation();
                                                    handleConsultantSelect(consultant);
                                                }}
                                            >
                                                ‚úèÔ∏è
                                            </button>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>

                        {/* Ï†ÑÎ¨∏Î∂ÑÏïº ÏÑ§Ï†ï */}
                        <div className="specialty-section">
                            <h4>Ï†ÑÎ¨∏Î∂ÑÏïº ÏÑ§Ï†ï</h4>
                            
                            {selectedConsultant ? (
                                <div className="specialty-form">
                                    <div className="form-group">
                                        <label>ÏÑ†ÌÉùÎêú ÏÉÅÎã¥ÏÇ¨</label>
                                        <div className="selected-consultant">
                                            {selectedConsultant.name || selectedConsultant.username}
                                        </div>
                                    </div>

                                    <div className="form-group">
                                        <label htmlFor="specialty">Ï†ÑÎ¨∏Î∂ÑÏïº</label>
                                        <div className="specialty-input-group">
                                            <select
                                                id="specialty"
                                                value={newSpecialty}
                                                onChange={(e) => setNewSpecialty(e.target.value)}
                                                disabled={loading}
                                            >
                                                <option value="">Ï†ÑÎ¨∏Î∂ÑÏïºÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</option>
                                                {specialties.map(specialty => (
                                                    <option key={specialty.codeValue} value={specialty.codeLabel}>
                                                        {specialty.codeLabel}
                                                    </option>
                                                ))}
                                            </select>
                                            <button 
                                                className="btn-save"
                                                onClick={handleSaveSpecialty}
                                                disabled={loading || !newSpecialty.trim()}
                                            >
                                                {loading ? 'Ï†ÄÏû• Ï§ë...' : 'Ï†ÄÏû•'}
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            ) : (
                                <div className="no-selection">
                                    <p>ÏÉÅÎã¥ÏÇ¨Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.</p>
                                </div>
                            )}

                            {/* ÏÉà Ï†ÑÎ¨∏Î∂ÑÏïº Ï∂îÍ∞Ä */}
                            <div className="add-specialty-form">
                                <h5>ÏÉà Ï†ÑÎ¨∏Î∂ÑÏïº Ï∂îÍ∞Ä</h5>
                                <div className="add-specialty-input-group">
                                    <input
                                        type="text"
                                        placeholder="ÏÉà Ï†ÑÎ¨∏Î∂ÑÏïºÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                                        value={newSpecialty}
                                        onChange={(e) => setNewSpecialty(e.target.value)}
                                        disabled={loading}
                                    />
                                    <button 
                                        className="btn-add"
                                        onClick={handleAddSpecialty}
                                        disabled={loading || !newSpecialty.trim()}
                                    >
                                        {loading ? 'Ï∂îÍ∞Ä Ï§ë...' : 'Ï∂îÍ∞Ä'}
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default SpecialtyManagementModal;
