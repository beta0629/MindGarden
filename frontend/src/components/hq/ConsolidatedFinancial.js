import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { Container, Row, Col, Card, Button, Table, Form, Alert, Badge } from 'react-bootstrap';
import { 
    FaCalculator, FaArrowLeft, FaDownload, FaFilter, FaChartLine,
    FaDollarSign, FaArrowUp, FaArrowDown, FaBuilding, FaCalendarAlt
} from 'react-icons/fa';
import { useSession } from '../../contexts/SessionContext';
import { apiGet } from '../../utils/ajax';
import { getCodeLabel } from '../../utils/commonCodeUtils';
import { showNotification } from '../../utils/notification';
import SimpleLayout from '../layout/SimpleLayout';
import LoadingSpinner from '../common/LoadingSpinner';
import Chart from '../common/Chart';
import './ConsolidatedFinancial.css';

/**
 * ÌÜµÌï© Ïû¨Î¨¥ÌòÑÌô© Ïª¥Ìè¨ÎÑåÌä∏
 * Ï†ÑÏÇ¨ Ïû¨Î¨¥ Îç∞Ïù¥ÌÑ∞Î•º ÌÜµÌï©ÌïòÏó¨ Î≥¥Ïó¨Ï£ºÎäî ÎåÄÏãúÎ≥¥Îìú
 * 
 * @author MindGarden
 * @version 1.0.0
 * @since 2025-01-17
 */
const ConsolidatedFinancial = () => {
    const navigate = useNavigate();
    const { user, isLoggedIn } = useSession();
    
    // ÏÉÅÌÉú Í¥ÄÎ¶¨
    const [loading, setLoading] = useState(false);
    const [dateRange, setDateRange] = useState({
        startDate: new Date(new Date().getFullYear(), new Date().getMonth(), 1).toISOString().split('T')[0], // ÌòÑÏû¨ Ïõî 1Ïùº
        endDate: new Date().toISOString().split('T')[0] // ÌòÑÏû¨ ÎÇ†Ïßú
    });
    
    const [consolidatedData, setConsolidatedData] = useState({
        summary: {
            totalRevenue: 0,
            totalExpense: 0,
            netProfit: 0,
            profitMargin: 0
        },
        branchData: [],
        monthlyTrend: [],
        categoryBreakdown: []
    });

    // Í∂åÌïú ÌôïÏù∏
    useEffect(() => {
        console.log('üìä ConsolidatedFinancial useEffect Ïã§ÌñâÎê®');
        console.log('üìä isLoggedIn:', isLoggedIn);
        console.log('üìä user:', user);
        
        if (!isLoggedIn) {
            console.log('üìä Î°úÍ∑∏Ïù∏ÎêòÏßÄ ÏïäÏùå, Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô');
            navigate('/login', { replace: true });
            return;
        }

        if (!user || !['HQ_ADMIN', 'SUPER_HQ_ADMIN', 'HQ_MASTER'].includes(user.role)) {
            console.log('üìä Í∂åÌïú ÏóÜÏùå, ÎåÄÏãúÎ≥¥ÎìúÎ°ú Ïù¥Îèô');
            showNotification('Ï†ëÍ∑º Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§.', 'error');
            navigate('/dashboard', { replace: true });
            return;
        }

        console.log('üìä Í∂åÌïú ÌôïÏù∏ ÏôÑÎ£å, Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏãúÏûë');
        loadConsolidatedData();
    }, [isLoggedIn, user, navigate, dateRange]);

    // ÌÜµÌï© Ïû¨Î¨¥ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    const loadConsolidatedData = useCallback(async () => {
        console.log('üöÄ loadConsolidatedData Ìï®Ïàò Ìò∏Ï∂úÎê®');
        setLoading(true);
        try {
            console.log('üìä ÌÜµÌï© Ïû¨Î¨¥ÌòÑÌô© Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏãúÏûë');
            console.log('üìä ÌòÑÏû¨ dateRange:', dateRange);
            console.log('üìä ÌòÑÏû¨ user:', user);
            console.log('üìä ÎÇ†Ïßú Î≤îÏúÑ:', dateRange.startDate, '~', dateRange.endDate);

            // ÌÜµÌï© Ïû¨Î¨¥ Îç∞Ïù¥ÌÑ∞ API Ìò∏Ï∂ú (Ìïú Î≤àÎßå Ìò∏Ï∂ú)
            const consolidatedResponse = await apiGet(
                `/api/hq/erp/consolidated?startDate=${dateRange.startDate}&endDate=${dateRange.endDate}`
            );
            
            console.log('üìä ÌÜµÌï© Ïû¨Î¨¥ API ÏùëÎãµ:', consolidatedResponse);
            
            // API ÏùëÎãµÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú
            const responseData = consolidatedResponse.data?.data || consolidatedResponse.data;
            console.log('üìä Ï∂îÏ∂úÎêú Îç∞Ïù¥ÌÑ∞:', responseData);
            
            // Ï†ÑÏ≤¥ ÏöîÏïΩ Îç∞Ïù¥ÌÑ∞
            const totalRevenue = responseData?.totalRevenue || 0;
            const totalExpenses = responseData?.totalExpenses || 0;
            const netProfit = responseData?.netProfit || 0;
            const profitMargin = totalRevenue > 0 ? (netProfit / totalRevenue) * 100 : 0;
            
            console.log('üìä Ï†ÑÏ≤¥ ÏöîÏïΩ:', {
                totalRevenue,
                totalExpenses,
                netProfit,
                profitMargin
            });
            
            // ÏßÄÏ†êÎ≥Ñ ÏÉÅÏÑ∏ Îç∞Ïù¥ÌÑ∞
            const branchBreakdown = responseData?.branchBreakdown || [];
            console.log('üìä ÏßÄÏ†êÎ≥Ñ Îç∞Ïù¥ÌÑ∞:', branchBreakdown);
            
            // ÏßÄÏ†êÎ≥Ñ Îç∞Ïù¥ÌÑ∞Î•º Ïª¥Ìè¨ÎÑåÌä∏ÏóêÏÑú ÏÇ¨Ïö©Ìï† ÌòïÌÉúÎ°ú Î≥ÄÌôò
            const branchFinancialData = branchBreakdown.map(branch => {
                const branchName = branch.branchName || branch.branchCode;
                const revenue = branch.revenue || 0;
                const expenses = branch.expenses || 0;
                const profit = revenue - expenses;
                
                return {
                    branchCode: branch.branchCode,
                    branchName: branchName,
                    revenue: revenue,
                    expense: expenses,
                    profit: profit,
                    transactionCount: branch.transactionCount || 0,
                    categoryBreakdown: {} // Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Îç∞Ïù¥ÌÑ∞Îäî Î≥ÑÎèÑ API ÌïÑÏöî
                };
            });
            
            console.log('üìä Î≥ÄÌôòÎêú ÏßÄÏ†êÎ≥Ñ Îç∞Ïù¥ÌÑ∞:', branchFinancialData);
            
            // Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÏßÄÏ∂ú Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨
            const rawCategoryBreakdown = responseData?.categoryBreakdown || [];
            const categoryBreakdown = rawCategoryBreakdown.map(item => {
                const totalExpense = totalExpenses || 0;
                const percentage = totalExpense > 0 ? (item.amount / totalExpense) * 100 : 0;
                return {
                    category: getCategoryKoreanName(item.category),
                    amount: item.amount,
                    percentage: Math.round(percentage * 100) / 100,
                    transactionCount: item.transactionCount,
                    avgAmount: item.avgAmount
                };
            });
            
            console.log('üìä Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÏßÄÏ∂ú Î∂ÑÏÑù:', categoryBreakdown);
            
            // ÏõîÎ≥Ñ Ìä∏Î†åÎìú Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± (ÏßÄÏ†êÎ≥Ñ Îç∞Ïù¥ÌÑ∞Î•º ÏßÄÏ†êÎ™ÖÏúºÎ°ú ÌëúÏãú)
            const monthlyTrend = branchFinancialData.map((branch) => ({
                month: branch.branchName,
                revenue: branch.revenue,
                expense: branch.expense
            }));
            
            console.log('üìä ÏõîÎ≥Ñ Ìä∏Î†åÎìú Îç∞Ïù¥ÌÑ∞:', monthlyTrend);

            setConsolidatedData({
                summary: {
                    totalRevenue,
                    totalExpense: totalExpenses,
                    netProfit,
                    profitMargin
                },
                branchData: branchFinancialData,
                monthlyTrend,
                categoryBreakdown: categoryBreakdown
            });

            console.log('‚úÖ ÌÜµÌï© Ïû¨Î¨¥ÌòÑÌô© Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å');

        } catch (error) {
            console.error('‚ùå ÌÜµÌï© Ïû¨Î¨¥ÌòÑÌô© Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
            showNotification('Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'error');
        } finally {
            setLoading(false);
        }
    }, [dateRange]);


    // ÌÜµÌôî Ìè¨Îß∑ÌåÖ
    const formatCurrency = (amount) => {
        return new Intl.NumberFormat('ko-KR', {
            style: 'currency',
            currency: 'KRW'
        }).format(amount);
    };

    // Ïπ¥ÌÖåÍ≥†Î¶¨Î™ÖÏùÑ ÌïúÍµ≠Ïñ¥Î°ú Î≥ÄÌôò
    const getCategoryKoreanName = (category) => {
        const categoryMap = {
            'SALARY': 'Í∏âÏó¨ÎπÑÏö©',
            'RENT': 'ÏûÑÎåÄÎ£å',
            'UTILITY': 'Í¥ÄÎ¶¨ÎπÑ',
            'OFFICE_SUPPLIES': 'ÏÇ¨Î¨¥Ïö©ÌíàÎπÑ',
            'TAX': 'ÏÑ∏Í∏à',
            'CONSULTATION': 'ÏÉÅÎã¥ÎπÑÏö©',
            'MARKETING': 'ÎßàÏºÄÌåÖÎπÑ',
            'TRAVEL': 'Ï∂úÏû•ÎπÑ',
            'EQUIPMENT': 'Ïû•ÎπÑÎπÑ',
            'MAINTENANCE': 'Ïú†ÏßÄÎ≥¥ÏàòÎπÑ',
            'INSURANCE': 'Î≥¥ÌóòÎ£å',
            'TRAINING': 'ÍµêÏú°ÎπÑ',
            'OTHER': 'Í∏∞ÌÉÄÎπÑÏö©'
        };
        return categoryMap[category] || category;
    };

    // ÎÇ†Ïßú Î≥ÄÍ≤Ω Ìï∏Îì§Îü¨
    const handleDateChange = (field, value) => {
        setDateRange(prev => ({
            ...prev,
            [field]: value
        }));
    };

    // Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï§ÄÎπÑ
    const chartData = {
        labels: consolidatedData.monthlyTrend.map(item => item.month),
        datasets: [
            {
                label: 'ÏàòÏùµ',
                data: consolidatedData.monthlyTrend.map(item => item.revenue),
                backgroundColor: 'rgba(40, 167, 69, 0.2)',
                borderColor: 'rgba(40, 167, 69, 1)',
                borderWidth: 2,
                fill: true
            },
            {
                label: 'ÏßÄÏ∂ú',
                data: consolidatedData.monthlyTrend.map(item => item.expense),
                backgroundColor: 'rgba(220, 53, 69, 0.2)',
                borderColor: 'rgba(220, 53, 69, 1)',
                borderWidth: 2,
                fill: true
            }
        ]
    };

    if (loading) {
        return (
            <SimpleLayout title="ÌÜµÌï© Ïû¨Î¨¥ÌòÑÌô©">
                <Container fluid className="py-4">
                    <LoadingSpinner text="Ïû¨Î¨¥ Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë..." size="large" />
                </Container>
            </SimpleLayout>
        );
    }

    return (
        <SimpleLayout title="ÌÜµÌï© Ïû¨Î¨¥ÌòÑÌô©">
            <Container fluid className="consolidated-financial py-4">
                {/* Ìó§Îçî */}
                <Row className="mb-4">
                    <Col>
                        <div className="d-flex justify-content-between align-items-center">
                            <div>
                                <Button 
                                    variant="outline-secondary" 
                                    onClick={() => navigate('/hq/dashboard')}
                                    className="me-3"
                                >
                                    <FaArrowLeft className="me-2" />
                                    Î≥∏ÏÇ¨ ÎåÄÏãúÎ≥¥Îìú
                                </Button>
                                <h2 className="d-inline-block mb-0">
                                    <FaCalculator className="me-2" />
                                    ÌÜµÌï© Ïû¨Î¨¥ÌòÑÌô©
                                </h2>
                            </div>
                            <Button variant="success">
                                <FaDownload className="me-2" />
                                Î≥¥Í≥†ÏÑú Îã§Ïö¥Î°úÎìú
                            </Button>
                        </div>
                    </Col>
                </Row>

                {/* ÌïÑÌÑ∞ */}
                <Row className="mb-4">
                    <Col>
                        <Card>
                            <Card.Body>
                                <Row className="align-items-end">
                                    <Col md={3}>
                                        <Form.Group>
                                            <Form.Label>ÏãúÏûëÏùº</Form.Label>
                                            <Form.Control
                                                type="date"
                                                value={dateRange.startDate}
                                                onChange={(e) => handleDateChange('startDate', e.target.value)}
                                            />
                                        </Form.Group>
                                    </Col>
                                    <Col md={3}>
                                        <Form.Group>
                                            <Form.Label>Ï¢ÖÎ£åÏùº</Form.Label>
                                            <Form.Control
                                                type="date"
                                                value={dateRange.endDate}
                                                onChange={(e) => handleDateChange('endDate', e.target.value)}
                                            />
                                        </Form.Group>
                                    </Col>
                                    <Col md={2}>
                                        <Button 
                                            variant="primary" 
                                            className="w-100"
                                            onClick={loadConsolidatedData}
                                        >
                                            <FaFilter className="me-2" />
                                            Ï°∞Ìöå
                                        </Button>
                                    </Col>
                                </Row>
                            </Card.Body>
                        </Card>
                    </Col>
                </Row>

                {/* ÏöîÏïΩ ÌÜµÍ≥Ñ */}
                <Row className="mb-4">
                    <Col md={3}>
                        <Card className="h-100 border-success">
                            <Card.Body className="text-center">
                                <FaArrowUp className="text-success mb-2 consolidated-stat-icon" />
                                <h3 className="text-success">{formatCurrency(consolidatedData.summary.totalRevenue)}</h3>
                                <p className="text-muted mb-0">Ï¥ù ÏàòÏùµ</p>
                            </Card.Body>
                        </Card>
                    </Col>
                    <Col md={3}>
                        <Card className="h-100 border-danger">
                            <Card.Body className="text-center">
                                <FaArrowDown className="text-danger mb-2 consolidated-stat-icon" />
                                <h3 className="text-danger">{formatCurrency(consolidatedData.summary.totalExpense)}</h3>
                                <p className="text-muted mb-0">Ï¥ù ÏßÄÏ∂ú</p>
                            </Card.Body>
                        </Card>
                    </Col>
                    <Col md={3}>
                        <Card className="h-100 border-primary">
                            <Card.Body className="text-center">
                                <FaDollarSign className="text-primary mb-2 consolidated-stat-icon" />
                                <h3 className={`${consolidatedData.summary.netProfit >= 0 ? 'text-success' : 'text-danger'}`}>
                                    {formatCurrency(consolidatedData.summary.netProfit)}
                                </h3>
                                <p className="text-muted mb-0">ÏàúÏù¥Ïùµ</p>
                            </Card.Body>
                        </Card>
                    </Col>
                    <Col md={3}>
                        <Card className="h-100 border-info">
                            <Card.Body className="text-center">
                                <FaChartLine className="text-info mb-2 consolidated-stat-icon" />
                                <h3 className={`${consolidatedData.summary.profitMargin >= 0 ? 'text-success' : 'text-danger'}`}>
                                    {consolidatedData.summary.profitMargin.toFixed(1)}%
                                </h3>
                                <p className="text-muted mb-0">ÏàòÏùµÎ•†</p>
                            </Card.Body>
                        </Card>
                    </Col>
                </Row>

                {/* ÏõîÎ≥Ñ Ìä∏Î†åÎìú Ï∞®Ìä∏ */}
                <Row className="mb-4">
                    <Col>
                        <Card>
                            <Card.Header>
                                <h5 className="mb-0">
                                    <FaChartLine className="me-2" />
                                    ÏõîÎ≥Ñ ÏàòÏùµ/ÏßÄÏ∂ú Ìä∏Î†åÎìú
                                </h5>
                            </Card.Header>
                            <Card.Body>
                                {consolidatedData.monthlyTrend.length > 0 ? (
                                    <Chart
                                        type="line"
                                        data={chartData}
                                        options={{
                                            responsive: true,
                                            plugins: {
                                                legend: {
                                                    position: 'top',
                                                },
                                                title: {
                                                    display: false
                                                }
                                            },
                                            scales: {
                                                y: {
                                                    beginAtZero: true,
                                                    ticks: {
                                                        callback: function(value) {
                                                            return new Intl.NumberFormat('ko-KR', {
                                                                style: 'currency',
                                                                currency: 'KRW',
                                                                minimumFractionDigits: 0
                                                            }).format(value);
                                                        }
                                                    }
                                                }
                                            }
                                        }}
                                    />
                                ) : (
                                    <div className="text-center py-5">
                                        <FaChartLine className="text-muted mb-3 consolidated-empty-icon" />
                                        <h5 className="text-muted">Ìä∏Î†åÎìú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§</h5>
                                        <p className="text-muted">ÏÑ†ÌÉùÌïú Í∏∞Í∞ÑÏóê ÎåÄÌïú ÏõîÎ≥Ñ Ìä∏Î†åÎìú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.</p>
                                    </div>
                                )}
                            </Card.Body>
                        </Card>
                    </Col>
                </Row>

                {/* ÏßÄÏ†êÎ≥Ñ Ïû¨Î¨¥ÌòÑÌô© */}
                <Row className="mb-4">
                    <Col>
                        <Card>
                            <Card.Header>
                                <h5 className="mb-0">
                                    <FaBuilding className="me-2" />
                                    ÏßÄÏ†êÎ≥Ñ Ïû¨Î¨¥ÌòÑÌô©
                                </h5>
                            </Card.Header>
                            <Card.Body>
                                <div className="consolidated-branch-table-container">
                                    <Table striped bordered hover responsive>
                                        <thead>
                                            <tr>
                                                <th>ÏßÄÏ†êÎ™Ö</th>
                                                <th>ÏßÄÏ†êÏΩîÎìú</th>
                                                <th>ÏàòÏùµ</th>
                                                <th>ÏßÄÏ∂ú</th>
                                                <th>ÏàúÏù¥Ïùµ</th>
                                                <th>Í±∞ÎûòÍ±¥Ïàò</th>
                                                <th>ÏÉÅÌÉú</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            {consolidatedData.branchData.map((branch, index) => (
                                                <tr key={index}>
                                                    <td>{branch.branchName}</td>
                                                    <td>{branch.branchCode}</td>
                                                    <td className="text-success">{formatCurrency(branch.revenue)}</td>
                                                    <td className="text-danger">{formatCurrency(branch.expense)}</td>
                                                    <td className={branch.profit >= 0 ? 'text-success' : 'text-danger'}>
                                                        {formatCurrency(branch.profit)}
                                                    </td>
                                                    <td>{branch.transactionCount}Í±¥</td>
                                                    <td>
                                                        <Badge bg={branch.profit >= 0 ? 'success' : 'warning'}>
                                                            {branch.profit >= 0 ? 'ÌùëÏûê' : 'Ï†ÅÏûê'}
                                                        </Badge>
                                                    </td>
                                                </tr>
                                            ))}
                                        </tbody>
                                    </Table>
                                </div>
                            </Card.Body>
                        </Card>
                    </Col>
                </Row>

                {/* Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÏßÄÏ∂ú Î∂ÑÏÑù */}
                <Row>
                    <Col>
                        <Card>
                            <Card.Header>
                                <h5 className="mb-0">
                                    <FaChartLine className="me-2" />
                                    Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÏßÄÏ∂ú Î∂ÑÏÑù
                                </h5>
                            </Card.Header>
                            <Card.Body>
                                {consolidatedData.categoryBreakdown.length > 0 ? (
                                    <Row>
                                        {consolidatedData.categoryBreakdown.map((item, index) => (
                                            <Col key={index} md={6} lg={4} className="mb-3">
                                                <div className="category-item p-3 border rounded">
                                                    <div className="d-flex justify-content-between align-items-center mb-2">
                                                        <h6 className="mb-0">{item.category}</h6>
                                                        <Badge bg="primary">{item.percentage}%</Badge>
                                                    </div>
                                                    <p className="text-muted mb-0">{formatCurrency(item.amount)}</p>
                                                    <div className="progress mt-2 consolidated-category-progress">
                                                        <div 
                                                            className="progress-bar" 
                                                            data-width={item.percentage}
                                                        ></div>
                                                    </div>
                                                </div>
                                            </Col>
                                        ))}
                                    </Row>
                                ) : (
                                    <div className="text-center py-5">
                                        <FaChartLine className="text-muted mb-3 consolidated-empty-icon" />
                                        <h5 className="text-muted">Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§</h5>
                                        <p className="text-muted">Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÏßÄÏ∂ú Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.</p>
                                    </div>
                                )}
                            </Card.Body>
                        </Card>
                    </Col>
                </Row>
            </Container>
        </SimpleLayout>
    );
};

export default ConsolidatedFinancial;
