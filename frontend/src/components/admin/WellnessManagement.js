import React, { useState, useEffect, useCallback } from 'react';
import MGButton from '../common/MGButton';
import { 
    Sparkles, 
    Send, 
    Database, 
    DollarSign, 
    TrendingUp,
    Calendar,
    Clock,
    CheckCircle,
    XCircle,
    RefreshCw,
    BarChart3
} from 'lucide-react';
import { apiGet, apiPost } from '../../utils/ajax';
import { useSession } from '../../contexts/SessionContext';
import notificationManager from '../../utils/notification';
import SimpleLayout from '../layout/SimpleLayout';
import UnifiedLoading from '../common/UnifiedLoading';
import { sessionManager } from '../../utils/sessionManager';
import './WellnessManagement.css';

/**
 * Ïõ∞ÎãàÏä§ ÏïåÎ¶º Í¥ÄÎ¶¨ ÌéòÏù¥ÏßÄ
 * - Í¥ÄÎ¶¨Ïûê Ï†ÑÏö© (BRANCH_ADMIN Ïù¥ÏÉÅ)
 * - ÌÖúÌîåÎ¶ø Í¥ÄÎ¶¨, ÌÖåÏä§Ìä∏ Î∞úÏÜ°, AI ÎπÑÏö© ÌÜµÍ≥Ñ
 * 
 * @author MindGarden
 * @version 1.0.0
 * @since 2025-01-21
 */
const WellnessManagement = () => {
    const { user, isLoggedIn } = useSession();
    const [loading, setLoading] = useState(true);
    const [sending, setSending] = useState(false);
    const [refreshing, setRefreshing] = useState(false);
    
    // ÌÜµÍ≥Ñ Îç∞Ïù¥ÌÑ∞
    const [stats, setStats] = useState({
        totalCost: 0,
        totalCostDisplay: '',
        totalTokens: 0,
        totalRequests: 0,
        recentLogs: [],
        exchangeRate: 1300.0,
        exchangeRateDisplay: ''
    });
    
    // ÌÖúÌîåÎ¶ø Îç∞Ïù¥ÌÑ∞
    const [templates, setTemplates] = useState([]);
    const [selectedMonth, setSelectedMonth] = useState({
        year: new Date().getFullYear(),
        month: new Date().getMonth() + 1
    });

    // Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ìï®Ïàò (Ïû¨ÏÇ¨Ïö© Í∞ÄÎä•)
    const loadData = useCallback(async () => {
        try {
            setLoading(true);
            console.log('üìä Ïõ∞ÎãàÏä§ Í¥ÄÎ¶¨ Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏãúÏûë');
            
            // API ÏÇ¨Ïö© ÌÜµÍ≥Ñ Î°úÎìú
            const usageStatsResponse = await apiGet('/api/admin/wellness/usage-stats', {
                year: selectedMonth.year,
                month: selectedMonth.month
            });
            
            console.log('üìä ÌÜµÍ≥Ñ ÏùëÎãµ:', usageStatsResponse);
            
            if (usageStatsResponse && usageStatsResponse.success) {
                setStats(usageStatsResponse.data);
            }
            
            // ÌÖúÌîåÎ¶ø Î™©Î°ù Î°úÎìú
            const templatesResponse = await apiGet('/api/admin/wellness/templates');
            
            console.log('üìã ÌÖúÌîåÎ¶ø ÏùëÎãµ:', templatesResponse);
            
            if (templatesResponse && templatesResponse.success) {
                setTemplates(templatesResponse.data);
            }
            
            // ÌôòÏú® Ï†ïÎ≥¥ Î°úÎìú
            const exchangeRateResponse = await apiGet('/api/admin/wellness/exchange-rate');
            
            console.log('üí∞ ÌôòÏú® ÏùëÎãµ:', exchangeRateResponse);
            
            if (exchangeRateResponse && exchangeRateResponse.success) {
                setStats(prev => ({
                    ...prev,
                    exchangeRate: exchangeRateResponse.data.exchangeRate || 1300.0,
                    exchangeRateDisplay: exchangeRateResponse.data.exchangeRateDisplay || ''
                }));
            }
            
            console.log('‚úÖ Ïõ∞ÎãàÏä§ Í¥ÄÎ¶¨ Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å');
        } catch (error) {
            console.error('‚ùå Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
            notificationManager.show('Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'error');
        } finally {
            setLoading(false);
        }
    }, [selectedMonth]);

    useEffect(() => {
        console.log('üîç Ïõ∞ÎãàÏä§ Í¥ÄÎ¶¨ useEffect Ïã§Ìñâ:', { isLoggedIn, userId: user?.id, selectedMonth });
        
        const loadDataAsync = async () => {
            // sessionManagerÏóêÏÑú ÏßÅÏ†ë ÏÇ¨Ïö©Ïûê ÌôïÏù∏
            const sessionUser = sessionManager.getUser();
            if (!sessionUser?.id) {
                console.log('‚ùå sessionManagerÏóê ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏóÜÏùå');
                return;
            }
            
            console.log('‚úÖ ÏÇ¨Ïö©Ïûê ÌôïÏù∏Îê®, Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏãúÏûë');
            
            try {
                setLoading(true);
                console.log('üìä Ïõ∞ÎãàÏä§ Í¥ÄÎ¶¨ Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏãúÏûë');
                
                // API ÏÇ¨Ïö© ÌÜµÍ≥Ñ Î°úÎìú
                const usageStatsResponse = await apiGet('/api/admin/wellness/usage-stats', {
                    year: selectedMonth.year,
                    month: selectedMonth.month
                });
                
                console.log('üìä ÌÜµÍ≥Ñ ÏùëÎãµ:', usageStatsResponse);
                
                if (usageStatsResponse && usageStatsResponse.success) {
                    setStats(usageStatsResponse.data);
                }
                
                // ÌÖúÌîåÎ¶ø Î™©Î°ù Î°úÎìú
                const templatesResponse = await apiGet('/api/admin/wellness/templates');
                
                console.log('üìã ÌÖúÌîåÎ¶ø ÏùëÎãµ:', templatesResponse);
                
                if (templatesResponse && templatesResponse.success) {
                    setTemplates(templatesResponse.data);
                }
                
                // ÌôòÏú® Ï†ïÎ≥¥ Î°úÎìú
                const exchangeRateResponse = await apiGet('/api/admin/wellness/exchange-rate');
                
                console.log('üí∞ ÌôòÏú® ÏùëÎãµ:', exchangeRateResponse);
                
                if (exchangeRateResponse && exchangeRateResponse.success) {
                    setStats(prev => ({
                        ...prev,
                        exchangeRate: exchangeRateResponse.data.exchangeRate || 1300.0,
                        exchangeRateDisplay: exchangeRateResponse.data.exchangeRateDisplay || ''
                    }));
                }
                
                console.log('‚úÖ Ïõ∞ÎãàÏä§ Í¥ÄÎ¶¨ Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å');
            } catch (error) {
                console.error('‚ùå Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
                notificationManager.show('Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'error');
            } finally {
                setLoading(false);
            }
        };
        
        loadDataAsync();
    }, [user?.id, selectedMonth.year, selectedMonth.month]);



    /**
     * ÌÖåÏä§Ìä∏ Î∞úÏÜ°
     */
    const handleTestSend = async () => {
        if (!window.confirm('Ïõ∞ÎãàÏä§ ÏïåÎ¶ºÏùÑ ÌÖåÏä§Ìä∏ Î∞úÏÜ°ÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n\nÎ™®Îì† ÎÇ¥Îã¥ÏûêÏóêÍ≤å Ï¶âÏãú Î∞úÏÜ°Îê©ÎãàÎã§.')) {
            return;
        }

        try {
            setSending(true);
            const response = await apiPost('/api/admin/wellness/test-send');
            
            if (response.success) {
                notificationManager.show('Ïõ∞ÎãàÏä§ ÏïåÎ¶ºÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î∞úÏÜ°ÎêòÏóàÏäµÎãàÎã§!', 'success');
                // ÌéòÏù¥ÏßÄ ÏÉàÎ°úÍ≥†Ïπ®ÏúºÎ°ú Îç∞Ïù¥ÌÑ∞ Îã§Ïãú Î°úÎìú
                window.location.reload();
            } else {
                notificationManager.show(response.message || 'Î∞úÏÜ°Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'error');
            }
        } catch (error) {
            console.error('‚ùå ÌÖåÏä§Ìä∏ Î∞úÏÜ° Ïã§Ìå®:', error);
            notificationManager.show('ÌÖåÏä§Ìä∏ Î∞úÏÜ° Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', 'error');
        } finally {
            setSending(false);
        }
    };

    /**
     * Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ®
     */
    const handleRefresh = () => {
        window.location.reload();
    };

    /**
     * ÌôòÏú® ÏÉàÎ°úÍ≥†Ïπ®
     */
    const handleExchangeRateRefresh = async () => {
        try {
            setRefreshing(true);
            const response = await apiPost('/api/admin/wellness/exchange-rate/refresh');
            
            if (response.success) {
                notificationManager.show('ÌôòÏú®ÏùÑ ÏÉàÎ°úÍ≥†Ïπ®ÌñàÏäµÎãàÎã§.', 'success');
                // Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ Îã§Ïãú Î°úÎìú
                await loadData();
            } else {
                notificationManager.show(response.message || 'ÌôòÏú® ÏÉàÎ°úÍ≥†Ïπ®Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'error');
            }
        } catch (error) {
            console.error('‚ùå ÌôòÏú® ÏÉàÎ°úÍ≥†Ïπ® Ïã§Ìå®:', error);
            notificationManager.show('ÌôòÏú® ÏÉàÎ°úÍ≥†Ïπ® Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', 'error');
        } finally {
            setRefreshing(false);
        }
    };

    /**
     * Ïõî Î≥ÄÍ≤Ω
     */
    const handleMonthChange = (direction) => {
        setSelectedMonth(prev => {
            let newMonth = prev.month + direction;
            let newYear = prev.year;
            
            if (newMonth > 12) {
                newMonth = 1;
                newYear++;
            } else if (newMonth < 1) {
                newMonth = 12;
                newYear--;
            }
            
            return { year: newYear, month: newMonth };
        });
    };

    /**
     * Ïπ¥ÌÖåÍ≥†Î¶¨ ÌïúÍ∏Ä Î≥ÄÌôò
     */
    const getCategoryName = (category) => {
        const categories = {
            'MENTAL': 'ÎßàÏùå Í±¥Í∞ï',
            'EXERCISE': 'Ïö¥Îèô',
            'SLEEP': 'ÏàòÎ©¥',
            'NUTRITION': 'ÏòÅÏñë',
            'GENERAL': 'ÏùºÎ∞ò'
        };
        return categories[category] || category;
    };

    /**
     * ÏöîÏùº ÌïúÍ∏Ä Î≥ÄÌôò
     */
    const getDayName = (dayOfWeek) => {
        if (!dayOfWeek) return 'Î™®Îì† ÏöîÏùº';
        const days = ['', 'Ïõî', 'Ìôî', 'Ïàò', 'Î™©', 'Í∏à', 'ÌÜ†', 'Ïùº'];
        return days[dayOfWeek] + 'ÏöîÏùº';
    };

    /**
     * Í≥ÑÏ†à ÌïúÍ∏Ä Î≥ÄÌôò
     */
    const getSeasonName = (season) => {
        const seasons = {
            'SPRING': 'Î¥Ñ',
            'SUMMER': 'Ïó¨Î¶Ñ',
            'FALL': 'Í∞ÄÏùÑ',
            'WINTER': 'Í≤®Ïö∏',
            'ALL': 'Î™®Îì† Í≥ÑÏ†à'
        };
        return seasons[season] || season;
    };

    if (loading) {
        return (
            <SimpleLayout>
                <UnifiedLoading message="Ïõ∞ÎãàÏä§ Í¥ÄÎ¶¨ Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë..." />
            </SimpleLayout>
        );
    }

    return (
        <SimpleLayout>
            <div className="mg-v2-container">
                {/* Ìó§Îçî */}
                <div className="mg-v2-section">
                    <div className="mg-v2-dashboard-header">
                        <div className="mg-v2-dashboard-header-content">
                            <div className="mg-v2-dashboard-header-left">
                                <Sparkles size={32} />
                                <div>
                                    <h1 className="mg-v2-dashboard-title">Ïõ∞ÎãàÏä§ ÏïåÎ¶º Í¥ÄÎ¶¨</h1>
                                    <p className="mg-v2-dashboard-subtitle">AI Í∏∞Î∞ò ÏûêÎèô Ïõ∞ÎãàÏä§ Ïª®ÌÖêÏ∏† ÏÉùÏÑ± Î∞è Î∞úÏÜ° Í¥ÄÎ¶¨</p>
                                </div>
                            </div>
                            <div className="mg-v2-header-actions">
                                <MGButton 
                                    variant="outline"
                                    size="small"
                                    onClick={handleExchangeRateRefresh}
                                    disabled={refreshing}
                                >
                                    <TrendingUp size={18} className={refreshing ? 'spinning' : ''} />
                                    ÌôòÏú® ÏÉàÎ°úÍ≥†Ïπ®
                                </MGButton>
                                <MGButton 
                                    variant="outline"
                                    size="small"
                                    onClick={handleRefresh}
                                    disabled={refreshing}
                                >
                                    <RefreshCw size={18} className={refreshing ? 'spinning' : ''} />
                                    ÏÉàÎ°úÍ≥†Ïπ®
                                </MGButton>
                                <MGButton 
                                    variant="primary"
                                    size="small"
                                    onClick={handleTestSend}
                                    disabled={sending}
                                >
                                    <Send size={18} />
                                    {sending ? 'Î∞úÏÜ° Ï§ë...' : 'ÌÖåÏä§Ìä∏ Î∞úÏÜ°'}
                                </MGButton>
                            </div>
                        </div>
                    </div>
                </div>

                {/* ÌÜµÍ≥Ñ Ïπ¥Îìú */}
                <div className="mg-v2-stats-grid">
                    <div className="mg-v2-card" style={{ display: 'flex', gap: 'var(--spacing-md)', padding: 'var(--spacing-md)' }}>
                        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', minWidth: '48px' }}>
                            <DollarSign size={20} />
                        </div>
                        <div style={{ flex: 1, minWidth: 0 }}>
                            <p className="mg-v2-text-sm" style={{ color: 'var(--color-text-secondary)', marginBottom: '4px' }}>Ïù¥Î≤à Îã¨ ÎπÑÏö©</p>
                            <p className="mg-v2-h3" style={{ marginBottom: '4px' }}>
                                {stats.totalCostDisplay || `$${(stats.totalCost || 0).toFixed(4)}`}
                            </p>
                            <p className="mg-v2-text-xs" style={{ color: 'var(--color-text-tertiary)' }}>
                                {selectedMonth.year}ÎÖÑ {selectedMonth.month}Ïõî
                                {stats.exchangeRateDisplay && (
                                    <span> (ÌôòÏú®: {stats.exchangeRateDisplay})</span>
                                )}
                            </p>
                        </div>
                    </div>

                    <div className="mg-v2-card" style={{ display: 'flex', gap: 'var(--spacing-md)', padding: 'var(--spacing-md)' }}>
                        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', minWidth: '48px' }}>
                            <Database size={20} />
                        </div>
                        <div style={{ flex: 1, minWidth: 0 }}>
                            <p className="mg-v2-text-sm" style={{ color: 'var(--color-text-secondary)', marginBottom: '4px' }}>ÏÇ¨Ïö© ÌÜ†ÌÅ∞</p>
                            <p className="mg-v2-h3" style={{ marginBottom: '4px' }}>
                                {(stats.totalTokens || 0).toLocaleString()}
                            </p>
                            <p className="mg-v2-text-xs" style={{ color: 'var(--color-text-tertiary)' }}>
                                Ï¥ù ÌÜ†ÌÅ∞ ÏÇ¨Ïö©Îüâ
                            </p>
                        </div>
                    </div>

                    <div className="mg-v2-card" style={{ display: 'flex', gap: 'var(--spacing-md)', padding: 'var(--spacing-md)' }}>
                        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', minWidth: '48px' }}>
                            <TrendingUp size={20} />
                        </div>
                        <div style={{ flex: 1, minWidth: 0 }}>
                            <p className="mg-v2-text-sm" style={{ color: 'var(--color-text-secondary)', marginBottom: '4px' }}>API Ìò∏Ï∂ú</p>
                            <p className="mg-v2-h3" style={{ marginBottom: '4px' }}>
                                {(stats.totalRequests || 0).toLocaleString()}
                            </p>
                            <p className="mg-v2-text-xs" style={{ color: 'var(--color-text-tertiary)' }}>
                                Ïù¥Î≤à Îã¨ Ï¥ù Ìò∏Ï∂ú Ïàò
                            </p>
                        </div>
                    </div>

                    <div className="mg-v2-card" style={{ display: 'flex', gap: 'var(--spacing-md)', padding: 'var(--spacing-md)' }}>
                        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', minWidth: '48px' }}>
                            <BarChart3 size={20} />
                        </div>
                        <div style={{ flex: 1, minWidth: 0 }}>
                            <p className="mg-v2-text-sm" style={{ color: 'var(--color-text-secondary)', marginBottom: '4px' }}>ÌÖúÌîåÎ¶ø Ïàò</p>
                            <p className="mg-v2-h3" style={{ marginBottom: '4px' }}>
                                {templates.length}
                            </p>
                            <p className="mg-v2-text-xs" style={{ color: 'var(--color-text-tertiary)' }}>
                                ÌôúÏÑ±ÌôîÎêú ÌÖúÌîåÎ¶ø
                            </p>
                        </div>
                    </div>
                </div>

                {/* Ïõî ÏÑ†ÌÉù */}
                <div className="mg-v2-section">
                    <div className="mg-v2-card" style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', gap: 'var(--spacing-md)' }}>
                        <MGButton variant="primary" size="small" onClick={() => handleMonthChange(-1)}>‚óÄ
                        </MGButton>
                        <span className="mg-v2-h2">
                            {selectedMonth.year}ÎÖÑ {selectedMonth.month}Ïõî
                        </span>
                        <MGButton variant="primary" size="small" onClick={() => handleMonthChange(1)} disabled={
                                selectedMonth.year === new Date().getFullYear() &&
                                selectedMonth.month === new Date().getMonth() + 1
                            }>‚ñ∂
                        </MGButton>
                    </div>
                </div>

                {/* ÏµúÍ∑º API ÏÇ¨Ïö© Î°úÍ∑∏ */}
                <div className="mg-v2-section">
                    <div className="mg-v2-card">
                        <h2 className="mg-v2-h2">
                            <Clock size={20} /> ÏµúÍ∑º API ÏÇ¨Ïö© ÎÇ¥Ïó≠
                        </h2>
                    <div className="wellness-logs">
                        {stats.recentLogs && stats.recentLogs.length > 0 ? (
                            stats.recentLogs.map((log) => (
                                <div key={log.id} className="wellness-log-item">
                                    <div className="wellness-log-status">
                                        {log.isSuccess ? (
                                            <CheckCircle size={20} className="wellness-log-icon--success" />
                                        ) : (
                                            <XCircle size={20} className="wellness-log-icon--error" />
                                        )}
                                    </div>
                                    <div className="wellness-log-content">
                                        <div className="wellness-log-header">
                                            <span className="wellness-log-type">{log.requestType}</span>
                                            <span className="wellness-log-model">{log.model}</span>
                                        </div>
                                        <div className="wellness-log-details">
                                            <span className="wellness-log-tokens">
                                                {log.totalTokens?.toLocaleString()} ÌÜ†ÌÅ∞
                                            </span>
                                            <span className="wellness-log-cost">
                                                {log.estimatedCostDisplay || `$${log.estimatedCost?.toFixed(6)}`}
                                            </span>
                                            <span className="wellness-log-time">
                                                {log.responseTimeMs}ms
                                            </span>
                                        </div>
                                    </div>
                                    <div className="wellness-log-date">
                                        <Calendar size={14} />
                                        <span>
                                            {new Date(log.createdAt).toLocaleString('ko-KR')}
                                        </span>
                                    </div>
                                </div>
                            ))
                        ) : (
                            <div className="wellness-empty">
                                <p>ÏµúÍ∑º ÏÇ¨Ïö© ÎÇ¥Ïó≠Ïù¥ ÏóÜÏäµÎãàÎã§.</p>
                            </div>
                        )}
                    </div>
                    </div>
                </div>

                {/* ÌÖúÌîåÎ¶ø Î™©Î°ù */}
                <div className="mg-v2-section">
                    <div className="mg-v2-card">
                        <h2 className="mg-v2-h2">
                            <Database size={20} /> Ïõ∞ÎãàÏä§ ÌÖúÌîåÎ¶ø Î™©Î°ù
                        </h2>
                    <div className="wellness-templates">
                        {templates.length > 0 ? (
                            templates.map((template) => (
                                <div key={template.id} className="wellness-template-card">
                                    <div className="wellness-template-header">
                                        <h3 className="wellness-template-title">{template.title}</h3>
                                        {template.isImportant && (
                                            <span className="wellness-template-badge wellness-template-badge--important">
                                                Ï§ëÏöî
                                            </span>
                                        )}
                                    </div>
                                    <div className="wellness-template-meta">
                                        <span className="wellness-template-tag">
                                            {getCategoryName(template.category)}
                                        </span>
                                        <span className="wellness-template-tag">
                                            {getDayName(template.dayOfWeek)}
                                        </span>
                                        <span className="wellness-template-tag">
                                            {getSeasonName(template.season)}
                                        </span>
                                    </div>
                                    <div className="wellness-template-stats">
                                        <span className="wellness-template-stat">
                                            ÏÇ¨Ïö© {template.usageCount}Ìöå
                                        </span>
                                        <span className="wellness-template-stat">
                                            ÏÉùÏÑ±Ïûê: {template.createdBy}
                                        </span>
                                    </div>
                                    {template.lastUsedAt && (
                                        <div className="wellness-template-date">
                                            ÎßàÏßÄÎßâ ÏÇ¨Ïö©: {new Date(template.lastUsedAt).toLocaleDateString('ko-KR')}
                                        </div>
                                    )}
                                </div>
                            ))
                        ) : (
                            <div className="wellness-empty">
                                <p>Îì±Î°ùÎêú ÌÖúÌîåÎ¶øÏù¥ ÏóÜÏäµÎãàÎã§.</p>
                                <p className="wellness-empty-hint">
                                    ÌÖåÏä§Ìä∏ Î∞úÏÜ°ÏùÑ ÌïòÎ©¥ AIÍ∞Ä ÏûêÎèôÏúºÎ°ú ÌÖúÌîåÎ¶øÏùÑ ÏÉùÏÑ±Ìï©ÎãàÎã§.
                                </p>
                            </div>
                        )}
                    </div>
                    </div>
                </div>
            </div>
        </SimpleLayout>
    );
};

export default WellnessManagement;

