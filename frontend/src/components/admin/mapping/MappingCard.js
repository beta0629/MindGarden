import React, { useState } from 'react';
import { User, Calendar, DollarSign, Clock, CheckCircle, XCircle, Database, Link } from 'lucide-react';
import MappingPaymentModal from './MappingPaymentModal';
import MappingDepositModal from './MappingDepositModal';

/**
 * Îß§Ïπ≠ Ïπ¥Îìú Ïª¥Ìè¨ÎÑåÌä∏ (ÎîîÏûêÏù∏ ÏãúÏä§ÌÖú v2.0 Ï†ÅÏö©)
 * - Í∞úÎ≥Ñ Îß§Ïπ≠ Ï†ïÎ≥¥Î•º Ïπ¥Îìú ÌòïÌÉúÎ°ú ÌëúÏãú
 * - Îß§Ïπ≠ ÏÉÅÌÉú, Ï∞∏Ïó¨Ïûê Ï†ïÎ≥¥, ÏÑ∏ÏÖò Ï†ïÎ≥¥ Îì± ÌëúÏãú
 * - ÎîîÏûêÏù∏ ÏãúÏä§ÌÖú ÌÅ¥ÎûòÏä§ ÏÇ¨Ïö©
 * 
 * @author MindGarden
 * @version 2.0.0
 * @since 2024-12-19
 * @updated 2025-10-15 - ÎîîÏûêÏù∏ ÏãúÏä§ÌÖú v2.0 Ï†ÅÏö©
 */
const MappingCard = ({ 
    mapping, 
    statusInfo = {
        label: mapping?.status || 'UNKNOWN',
        color: 'var(--color-text-secondary, #424245)',
        icon: 'üìã'
    },
    onApprove, 
    onReject, 
    onConfirmPayment,
    onConfirmDeposit,
    onEdit, 
    onView,
    onTransfer,
    onViewTransferHistory,
    onRefund,
    onDelete
}) => {
    const [showPaymentModal, setShowPaymentModal] = useState(false);
    const [showDepositModal, setShowDepositModal] = useState(false);
    
    // ÏÉÅÌÉúÎ≥Ñ ÏÉâÏÉÅ (propsÏóêÏÑú Î∞õÏùÄ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©)
    const getStatusColor = (status) => {
        return statusInfo.color;
    };

    // ÏÉÅÌÉúÎ≥Ñ ÌïúÍ∏ÄÎ™Ö (propsÏóêÏÑú Î∞õÏùÄ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©)
    const getStatusLabel = (status) => {
        return statusInfo.label;
    };

    // ÏÉÅÌÉúÎ≥Ñ ÏïÑÏù¥ÏΩò (propsÏóêÏÑú Î∞õÏùÄ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©)
    const getStatusIcon = (status) => {
        return statusInfo.icon;
    };

    // ÎÇ†Ïßú Ìè¨Îß∑ÌåÖ Ìï®Ïàò
    const formatDate = (dateString) => {
        try {
            return new Date(dateString).toLocaleDateString('ko-KR');
        } catch (error) {
            return 'ÎÇ†Ïßú Ïò§Î•ò';
        }
    };

    // Í∏àÏï° Ìè¨Îß∑ÌåÖ Ìï®Ïàò
    const formatAmount = (amount) => {
        if (!amount) return 'N/A';
        return `${amount.toLocaleString()}Ïõê`;
    };

    // ERP Ïó∞Îèô ÏÉÅÌÉú ÌôïÏù∏ Ìï®Ïàò
    const isErpIntegrated = () => {
        return mapping.erpIntegrated || 
               mapping.erpSyncStatus === 'SYNCED' || 
               mapping.erpTransactionId || 
               mapping.erpStatus === 'ACTIVE' ||
               mapping.paymentConfirmed; // Í≤∞Ï†ú ÌôïÏù∏Îêú Í≤ΩÏö∞ ERP Ïó∞ÎèôÏúºÎ°ú Í∞ÑÏ£º
    };

    // ERP Ïó∞Îèô ÏÉÅÌÉú ÌÖçÏä§Ìä∏
    const getErpStatusText = () => {
        if (mapping.erpSyncStatus === 'SYNCED') return 'ERP ÎèôÍ∏∞Ìôî ÏôÑÎ£å';
        if (mapping.erpTransactionId) return 'ERP Í±∞Îûò Îì±Î°ùÎê®';
        if (mapping.paymentConfirmed) return 'ERP ÏûêÎèô Ïó∞Îèô';
        return 'ERP Ïó∞ÎèôÎê®';
    };

    return (
        <div className="mg-card mg-mapping-card">
            {/* Ïπ¥Îìú Ìó§Îçî */}
            <div className="mg-card-header">
                <div className="mg-mapping-status">
                    <span 
                        className={`mg-status-badge ${mapping.status.toLowerCase()}`}
                        style={{ '--status-color': getStatusColor(mapping.status) }}
                    >
                        {getStatusIcon(mapping.status)}
                        {getStatusLabel(mapping.status)}
                    </span>
                    
                    {/* ERP Ïó∞Îèô ÏÉÅÌÉú ÌëúÏãú */}
                    {isErpIntegrated() && (
                        <span className="mg-erp-badge">
                            <Database size={12} />
                            {getErpStatusText()}
                        </span>
                    )}
                </div>
                <div className="mg-mapping-actions">
                    {onView && (
                        <button 
                            className="mg-btn mg-btn--sm mg-btn--primary"
                            onClick={() => onView(mapping)}
                        >
                            ÏÉÅÏÑ∏Î≥¥Í∏∞
                        </button>
                    )}
                </div>
            </div>

            {/* Ïπ¥Îìú Î≥∏Î¨∏ */}
            <div className="mg-card-body">
                {/* Îß§Ïπ≠ Ï†ïÎ≥¥ */}
                <div className="mg-mapping-info">
                    <div className="mg-info-row">
                        <div className="mg-info-item">
                            <User size={16} className="mg-info-icon" />
                            <div className="mg-info-content">
                                <span className="mg-info-label">ÏÉÅÎã¥ÏÇ¨</span>
                                <span className="mg-info-value">
                                    {mapping.consultantName || mapping.consultant?.name || 'N/A'}
                                </span>
                            </div>
                        </div>
                        <div className="mg-info-item">
                            <User size={16} className="mg-info-icon" />
                            <div className="mg-info-content">
                                <span className="mg-info-label">ÎÇ¥Îã¥Ïûê</span>
                                <span className="mg-info-value">
                                    {mapping.clientName || mapping.client?.name || 'N/A'}
                                </span>
                            </div>
                        </div>
                    </div>

                    <div className="mg-info-row">
                        <div className="mg-info-item">
                            <DollarSign size={16} className="mg-info-icon" />
                            <div className="mg-info-content">
                                <span className="mg-info-label">Ìå®ÌÇ§ÏßÄ</span>
                                <span className="mg-info-value">
                                    {mapping.packageName || 'N/A'}
                                </span>
                            </div>
                        </div>
                        <div className="mg-info-item">
                            <DollarSign size={16} className="mg-info-icon" />
                            <div className="mg-info-content">
                                <span className="mg-info-label">Í∏àÏï°</span>
                                <span className="mg-info-value mg-info-value--highlight">
                                    {formatAmount(mapping.packagePrice || mapping.paymentAmount)}
                                </span>
                            </div>
                        </div>
                    </div>
                </div>

                {/* ERP Ïó∞Îèô Ï†ïÎ≥¥ */}
                {isErpIntegrated() && (
                    <div className="mg-mapping-erp">
                        <div className="mg-erp-info">
                            <Database size={16} className="mg-erp-icon" />
                            <div className="mg-erp-content">
                                <span className="mg-erp-label">ERP Ïó∞Îèô</span>
                                <span className="mg-erp-value">{getErpStatusText()}</span>
                                {mapping.erpTransactionId && (
                                    <span className="mg-erp-transaction">
                                        Í±∞ÎûòÎ≤àÌò∏: {mapping.erpTransactionId}
                                    </span>
                                )}
                            </div>
                        </div>
                    </div>
                )}

                {/* ÎÇ†Ïßú Ï†ïÎ≥¥ */}
                <div className="mg-mapping-dates">
                    {mapping.startDate && (
                        <div className="mg-date-item">
                            <Calendar size={14} className="mg-date-icon" />
                            <span className="mg-date-label">ÏãúÏûëÏùº:</span>
                            <span className="mg-date-value">{formatDate(mapping.startDate)}</span>
                        </div>
                    )}
                    
                    {mapping.createdAt && (
                        <div className="mg-date-item">
                            <Clock size={14} className="mg-date-icon" />
                            <span className="mg-date-label">ÏÉùÏÑ±Ïùº:</span>
                            <span className="mg-date-value">{formatDate(mapping.createdAt)}</span>
                        </div>
                    )}
                    
                    {mapping.adminApprovalDate && (
                        <div className="mg-date-item">
                            <CheckCircle size={14} className="mg-date-icon mg-date-icon--success" />
                            <span className="mg-date-label">ÏäπÏù∏Ïùº:</span>
                            <span className="mg-date-value">{formatDate(mapping.adminApprovalDate)}</span>
                        </div>
                    )}
                </div>
            </div>

            {/* Ïπ¥Îìú Ìë∏ÌÑ∞ */}
            <div className="mg-card-footer">
                <div className="mg-mapping-actions">
                    {mapping.status === 'PENDING_PAYMENT' && (
                        <button 
                            className="mg-btn mg-btn--sm mg-btn--success"
                            onClick={() => setShowPaymentModal(true)}
                        >
                            Í≤∞Ï†ú ÌôïÏù∏
                        </button>
                    )}
                    
                    {mapping.status === 'PAYMENT_CONFIRMED' && (
                        <button 
                            className="mg-btn mg-btn--sm mg-btn--info"
                            onClick={() => setShowDepositModal(true)}
                        >
                            ÏûÖÍ∏à ÌôïÏù∏
                        </button>
                    )}
                    
                    {onEdit && (
                        <button 
                            className="mg-btn mg-btn--sm mg-btn--warning"
                            onClick={() => onEdit(mapping)}
                        >
                            ÏàòÏ†ï
                        </button>
                    )}
                    
                    {onRefund && (
                        <button 
                            className="mg-btn mg-btn--sm mg-btn--danger"
                            onClick={() => onRefund(mapping)}
                        >
                            ÌôòÎ∂à
                        </button>
                    )}
                </div>
            </div>

            {/* Î™®Îã¨Îì§ */}
            {showPaymentModal && (
                <MappingPaymentModal
                    isOpen={showPaymentModal}
                    onClose={() => setShowPaymentModal(false)}
                    mapping={mapping}
                    onPaymentConfirmed={onConfirmPayment}
                />
            )}

            {showDepositModal && (
                <MappingDepositModal
                    isOpen={showDepositModal}
                    onClose={() => setShowDepositModal(false)}
                    mapping={mapping}
                    onDepositConfirmed={onConfirmDeposit}
                />
            )}
        </div>
    );
};

export default MappingCard;